<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/03/20/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/Node+Vue+Mysql/"/>
      <url>/2021/03/20/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/Node+Vue+Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-vue-Mysql"><a href="#Node-vue-Mysql" class="headerlink" title="Node  +  vue + Mysql"></a>Node  +  vue + Mysql</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>本篇是个人结合自己开发过程中对Node、vue和mysql结合的理解</li><li>在查阅很多资料后由于网上很少有综合的模板，为了以后做模板也为了做近期的总结。</li><li>完成了基本的商品和用户的表格渲染、分页、增删改查、退出登录功能。</li></ul><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>node环境</li><li>vue的脚手架创建项目</li></ul><h2 id="Node-js-开启服务器"><a href="#Node-js-开启服务器" class="headerlink" title="Node.js 开启服务器"></a>Node.js 开启服务器</h2><ul><li><p>Node运行和必备的中间件</p><ul><li>建立server文件夹</li></ul><ul><li><p><code>body-parser</code>  处理表单数据的中间件</p></li><li><p>express 框架 node.js 的开发框架 </p></li><li><p>router     处理路由</p></li><li><p>nodemon 自动刷新</p></li><li><p>目录 </p></li></ul></li><li><p>相关代码  index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; node后端服务器</span><br><span class="line">const homeApi &#x3D; require(&#39;.&#x2F;api&#x2F;homeApi&#39;) &#x2F;&#x2F; 上面说的后台接口文件</span><br><span class="line">const loginApi &#x3D; require(&#39;.&#x2F;api&#x2F;loginApi&#39;)</span><br><span class="line">const userApi &#x3D; require(&#39;.&#x2F;api&#x2F;userApi&#39;)</span><br><span class="line">const rightsApi &#x3D; require(&#39;.&#x2F;api&#x2F;rightsApi&#39;)</span><br><span class="line">const bodyParser &#x3D; require(&#39;body-parser&#39;) </span><br><span class="line">&#x2F;&#x2F; body-parser是非常常用的一个express中间件，作用是对http请求体进行解析</span><br><span class="line"></span><br><span class="line">const express &#x3D; require(&#39;express&#39;) &#x2F;&#x2F; express框架</span><br><span class="line">const app &#x3D; express()</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 后端api路由</span><br><span class="line">app.use(&#39;&#x2F;home&#39;, homeApi) &#x2F;&#x2F; 使用homeapi文件中的接口</span><br><span class="line">app.use(&#39;&#x2F;login&#39;, loginApi)</span><br><span class="line">app.use(&#39;&#x2F;user&#39;, userApi)</span><br><span class="line">app.use(&#39;&#x2F;right&#39;,rightsApi)</span><br><span class="line">&#x2F;&#x2F; 监听端口</span><br><span class="line">app.listen(3000) &#x2F;&#x2F; 监听server3000端口</span><br><span class="line">console.log(&#39;success listen at port:3000&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>db.js mysql的配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  mysql: &#123;</span><br><span class="line">    host: &#39;localhost&#39;,</span><br><span class="line">    user: &#39;root&#39;,</span><br><span class="line">    password: &#39;130401&#39;, &#x2F;&#x2F; mysql用户名密码</span><br><span class="line">    database: &#39;user&#39;, &#x2F;&#x2F; mysql数据库名</span><br><span class="line">    port: &#39;3306&#39; &#x2F;&#x2F; mysql链接端口</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>sqlMap.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; sqlmap.js</span><br><span class="line">var sqlMap &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; home</span><br><span class="line">  home: &#123;</span><br><span class="line">    search: &#39;select * from users&#39;,</span><br><span class="line">  &#125;,</span><br><span class="line">  login:&#123;</span><br><span class="line">    search: &#39;select * from users&#39;,</span><br><span class="line">  &#125;,</span><br><span class="line">  users:&#123;</span><br><span class="line">    search: &#39;select * from userlist&#39;,</span><br><span class="line">    searchbyid:&#39;select * from userlist where id &#x3D; ?&#39;,</span><br><span class="line">    save:&quot;update userlist set userName&#x3D;?,email&#x3D;?,mobile&#x3D;? where id&#x3D;?&quot;,</span><br><span class="line">    add: &#39;insert into                  userlist(userName,mobile,email,role_name,id,crete_time,ms_state,type)   values (?,?,?,?,?,?,?,?)&#39;,</span><br><span class="line">    update: &quot;update userlist set ms_state&#x3D;? where id&#x3D;?&quot;,</span><br><span class="line">    deleteid:&quot;delete from userlist where id&#x3D;?&quot;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; sqlMap</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>api文件下loginAPI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; loginApi.js</span><br><span class="line">const models &#x3D; require(&#39;..&#x2F;db&#39;) &#x2F;&#x2F; 引入db配置</span><br><span class="line">const express &#x3D; require(&#39;express&#39;) &#x2F;&#x2F; express框架</span><br><span class="line">const router &#x3D; express.Router()</span><br><span class="line">const mysql &#x3D; require(&#39;mysql&#39;)</span><br><span class="line">const $sql &#x3D; require(&#39;..&#x2F;sqlMap&#39;) &#x2F;&#x2F; sql语句</span><br><span class="line">const jwt &#x3D; require(&#39;jsonwebtoken&#39;)</span><br><span class="line">&#x2F;&#x2F; 连接数据库</span><br><span class="line">const conn &#x3D; mysql.createConnection(models.mysql)</span><br><span class="line">conn.connect()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(&#39;&#x2F;getlogin&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line">  const sql &#x3D; $sql.login.search</span><br><span class="line">  const parms &#x3D; req.body</span><br><span class="line">  conn.query(sql, function (err, result) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    if (result) &#123;</span><br><span class="line"></span><br><span class="line">      let islogin &#x3D; false</span><br><span class="line">      for(let i&#x3D;0;i&lt;result.length;i++)&#123;</span><br><span class="line">    if(result[i].userName &#x3D;&#x3D; parms.username &amp;&amp;result[i].passWord &#x3D;&#x3D; parms.password )&#123;</span><br><span class="line">          islogin &#x3D; true;         </span><br><span class="line">   &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">if(islogin) &#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    name:parms.username,</span><br><span class="line">    &#x2F;&#x2F; 生成token 使用 jwt 加密</span><br><span class="line">    token: jwt.sign( &#123;username:parms.username&#125;,&#39;abcd&#39;,&#123;</span><br><span class="line">      expiresIn:&#39;3000s&#39;</span><br><span class="line">    &#125;),</span><br><span class="line">    meta:&#123;</span><br><span class="line">      msg: &quot;登录成功&quot;,</span><br><span class="line">      status: 200,  </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  res.send(&#123;</span><br><span class="line">    meta:&#123;</span><br><span class="line">      msg: &quot;登录失败&quot;,</span><br><span class="line">      status: 404</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">module.exports &#x3D; router</span><br></pre></td></tr></table></figure></li></ul><ul><li>服务端主要是连接mysql，通过SQL语句查询数据 返回 json 数据</li><li>通过 body 和 query 属性 获取 客户端传来的 值</li></ul><h2 id="关于用户登录的问题"><a href="#关于用户登录的问题" class="headerlink" title="关于用户登录的问题"></a>关于用户登录的问题</h2><ul><li><p>我采用的是token的形式进行路由拦截</p></li><li><p>使用 jwt 插件生成token </p></li><li><p>用户登录后 便会携带token 值 否则为未登录状态</p></li><li><p>前端关键性代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F; 登录判断</span><br><span class="line"> const &#123;data: res&#125; &#x3D; await   this.$http.post(&#39;&#x2F;login&#x2F;getlogin&#39;,this.loginFrom) </span><br><span class="line">                        if(res.meta.status !&#x3D;200)   return this.$message.error(&quot;登录失败&quot;)</span><br><span class="line">                        this.$message.success(&quot;登录成功&quot;)</span><br><span class="line">                          window.sessionStorage.setItem(&#39;token&#39;,res.token) </span><br><span class="line">                          </span><br><span class="line">                            this.$router.push(&quot;&#x2F;home&quot;)      </span><br><span class="line">                            </span><br><span class="line">                            </span><br><span class="line">  &#x2F;&#x2F; 请求拦截                          </span><br><span class="line">  axios.interceptors.request.use(config&#x3D;&gt;&#123;</span><br><span class="line">  config.headers.Autohorization &#x3D; window.sessionStorage.getItem(&#39;token&#39;)</span><br><span class="line">return config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;路由守卫</span><br><span class="line">router.beforeEach((to,from,next)&#x3D;&gt;&#123;</span><br><span class="line">  if(to.path&#x3D;&#x3D;&quot;&#x2F;login&quot;) return next();</span><br><span class="line">  const tokenStr &#x3D; window.sessionStorage.getItem(&#39;token&#39;);</span><br><span class="line">  if(!tokenStr)return next(&#39;&#x2F;login&#39;)</span><br><span class="line">  next()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关请求"><a href="#相关请求" class="headerlink" title="相关请求"></a>相关请求</h2><ul><li><p>客户端发起的 <code>get、post</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">async edit()&#123;</span><br><span class="line"></span><br><span class="line">     const &#123;data : res&#125; &#x3D; await this.$http.get(&quot;&#x2F;user&#x2F;saveuserlist&#x2F;&quot;,&#123;params:this.editForm&#125;)</span><br><span class="line">          if(res.meta.status!&#x3D;200)&#123;return  this.$message.success(&quot;修改失败&quot;)&#125;</span><br><span class="line">       this.$message.success(&quot;修改成功&quot;)</span><br><span class="line">        this.centerDialogVisible2&#x3D; false;</span><br><span class="line">         this.getUserList()</span><br><span class="line"></span><br><span class="line">   &#125;,    </span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add()&#123;</span><br><span class="line">     </span><br><span class="line">     this.$refs.addFormRef.validate(async(valid,obj)&#x3D;&gt;&#123;</span><br><span class="line">       if(!valid)&#123;return&#125;</span><br><span class="line">               </span><br><span class="line">    const &#123;data : res&#125;  &#x3D; await  this.$http.post(&#39;&#x2F;user&#x2F;addlist&#39;,&#123;params:this.addForm&#125;) </span><br><span class="line">     if(res.meta.status!&#x3D;200)&#123;return  this.$message.err(&quot;添加失败&quot;)&#125;</span><br><span class="line">       this.$message.success(&quot;添加成功&quot;)</span><br><span class="line">        this.centerDialogVisible &#x3D; false;</span><br><span class="line">         this.getUserList()</span><br><span class="line">   </span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>服务端代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">router.get(&#39;&#x2F;saveuserlist&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  const sql &#x3D; $sql.users.save</span><br><span class="line"> const params &#x3D; req.query</span><br><span class="line">    conn.query(sql,[params.username,params.email,params.mobile,params.id],function (err, result) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">        console.log(err)</span><br><span class="line">      &#125;</span><br><span class="line">      if (result) &#123;</span><br><span class="line">        res.send( &#123;</span><br><span class="line">          result,</span><br><span class="line">           meta:&#123;</span><br><span class="line">             status:200</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.post(&#39;&#x2F;addlist&#39;, (req, res) &#x3D;&gt; &#123;</span><br><span class="line"> const sql &#x3D; $sql.users.add</span><br><span class="line">  const params &#x3D; req.body.params</span><br><span class="line">   const date &#x3D; new Date()</span><br><span class="line">   const ms_state &#x3D; 1; </span><br><span class="line">   const type &#x3D; 1;</span><br><span class="line">  conn.query(sql,[params.username,params.mobile,params.email,params.roleName,null,date,ms_state,type] ,function (err, result) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">    if (result) &#123;</span><br><span class="line">      jsonWrite(res, result)</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>主要的还是服务器对客户端携带参数的获取，通过参数 查到数据返回json数据和一个状态码。</p></li><li><p>这是第一次的综合性运用，整体来说主要是练习get、post 的请求和前端的渲染工作。</p></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>在获取数据时由于数据库中的数据设计的都很简单，只能完成基本的表格渲染和分页功能</li><li>对node 和 vue 的知识不熟练，关于vue的生命周期函数和钩子函数，拦截器只是知道这么用但原理还不太清楚，感觉只是停留在基本的表面使用。</li><li>对于element-ui 第一次使用，很多属性和方法都不明确。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>project</title>
      <link href="/2021/02/01/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E6%99%BA%E8%83%BD%E5%B0%8F%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E8%BF%85%E7%A7%9140%E6%9C%9F%E5%AF%92%E5%81%87%E5%9F%B9%E8%AE%AD/"/>
      <url>/2021/02/01/%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6/%E6%99%BA%E8%83%BD%E5%B0%8F%E5%8A%A9%E6%89%8B%E2%80%94%E2%80%94%E8%BF%85%E7%A7%9140%E6%9C%9F%E5%AF%92%E5%81%87%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="项目名称-：智能小助手"><a href="#项目名称-：智能小助手" class="headerlink" title="项目名称 ：智能小助手"></a>项目名称 ：智能小助手</h2><h3 id="类型-：-移动端"><a href="#类型-：-移动端" class="headerlink" title="类型 ： 移动端"></a>类型 ： 移动端</h3><h3 id="主要运用技术：-jqery-封装的ajax、ALAPI-的后台接口"><a href="#主要运用技术：-jqery-封装的ajax、ALAPI-的后台接口" class="headerlink" title="主要运用技术：  jqery 封装的ajax、ALAPI 的后台接口"></a>主要运用技术：  jqery 封装的ajax、ALAPI 的后台接口</h3><h3 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h3><ul><li>您可以输入“舔狗”查看舔狗日记</li><li>您可以输入城市名称查看对应的国内天气</li></ul><h3 id="项目流程："><a href="#项目流程：" class="headerlink" title="项目流程："></a>项目流程：</h3><ul><li>根据老师的设计思路制作一个简易的面板</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;title&quot;&gt;智能小助手&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">          &lt;img class&#x3D;&quot;leftImg&quot; src&#x3D;&quot;01.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;leftMsg&quot;&gt;您可以输入“舔狗”查看舔狗日记&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">          &lt;img class&#x3D;&quot;rightImg&quot; src&#x3D;&quot;01.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">          &lt;div class&#x3D;&quot;rightMsg&quot;&gt;您可以输入城市名称查看对应的国内天气&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;input&quot;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入...&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ul><li>使用ajax调用接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;apps.bdimg.com&#x2F;libs&#x2F;jquery&#x2F;2.1.4&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function sendMsg(fo, text) &#123;</span><br><span class="line">        var res &#x3D; &#39;&#39;;</span><br><span class="line">        if (fo &#x3D;&#x3D; &quot;left&quot;) &#123;</span><br><span class="line">            res &#x3D; &#96;&lt;div class&#x3D;&quot;left&quot;&gt;</span><br><span class="line">            &lt;img class&#x3D;&quot;leftImg&quot; src&#x3D;&quot;01.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;leftMsg&quot;&gt;&#96; + text + &#96;&lt;&#x2F;div&gt;&#96;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            res &#x3D; &#96; &lt;div class&#x3D;&quot;right&quot;&gt;</span><br><span class="line">            &lt;img class&#x3D;&quot;rightImg&quot; src&#x3D;&quot;01.png&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;rightMsg&quot;&gt;&#96;+ text + &#96;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;&#96;</span><br><span class="line">        &#125;</span><br><span class="line">        $(&#39;.main&#39;).append(res);</span><br><span class="line">        $(&#39;.main&#39;).animate(&#123;</span><br><span class="line">            scrollTop: $(&#39;.main&#39;).prop(&quot;scrollHeight&quot;)</span><br><span class="line">        &#125;, 800)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $(&#39;.input input&#39;).keypress(function (e) &#123;</span><br><span class="line"></span><br><span class="line">        if (e.keyCode &#x3D;&#x3D; 13) &#123;</span><br><span class="line">            var value &#x3D; $(this).val();</span><br><span class="line">            sendMsg(&quot;right&quot;, value);</span><br><span class="line">            $(&#39;.title&#39;).text(&quot;正在输入中.....&quot;);</span><br><span class="line">            if ($(this).val() &#x3D;&#x3D; &quot;舔狗&quot;) &#123;</span><br><span class="line">                tiangou();</span><br><span class="line">                $(this).val(&#39;&#39;)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url: &#39;https:&#x2F;&#x2F;v1.alapi.cn&#x2F;api&#x2F;tianqi&#x2F;now&#39;,</span><br><span class="line">                    data: &#123; location: value &#125;,</span><br><span class="line">                    success(res) &#123;</span><br><span class="line">                        var result &#x3D; &#96;您查询的城市是:&lt;span&gt;&#96; + value + &#96;&lt;&#x2F;span&gt; &lt;&#x2F;br&gt;&#96; +</span><br><span class="line">                            &#96;该城市天气状况为:&lt;span&gt;&#96; + res.data.wea + &#96;&lt;&#x2F;span&gt;&lt;&#x2F;br&gt;&#96;+</span><br><span class="line">                            &#96;该城市温度为:&lt;span&gt;&#96; + res.data.tem2 + &quot;℃~&quot; +                                        res.data.tem1 + &quot;℃&quot; + &#96;&lt;&#x2F;span&gt;&lt;&#x2F;br&gt;&#96; +</span><br><span class="line">                            &#96;该城市风向为:&lt;span&gt;&#96; + res.data.win + &#96;&lt;&#x2F;span&gt;&#96;;</span><br><span class="line">                        sendMsg(&quot;left&quot;, result)</span><br><span class="line"></span><br><span class="line">                    &#125;, error() &#123; sendMsg(&quot;left&quot;, &#39;输入有误&#39;) &#125;,</span><br><span class="line">                    complete() &#123;</span><br><span class="line">                        $(&#39;.title&#39;).text(&quot;智能小助手&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; $(this).val(&#39;&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    function tiangou() &#123;</span><br><span class="line">        var value &#x3D; &#39;&#39;;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: &#39; https:&#x2F;&#x2F;v1.alapi.cn&#x2F;api&#x2F;dog&#39;,</span><br><span class="line">            data: &#123; location: value &#125;,</span><br><span class="line">            success(res) &#123;</span><br><span class="line">                sendMsg(&quot;left&quot;, res.data.content)</span><br><span class="line">            &#125;, error() &#123; sendMsg(&quot;left&quot;, &#39;输入有误&#39;) &#125;,</span><br><span class="line">            complete: function () &#123;</span><br><span class="line">                $(&#39;.title&#39;).text(&quot;智能小助手&quot;),</span><br><span class="line">                    $(this).val(&#39;&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="效果展示："><a href="#效果展示：" class="headerlink" title="效果展示："></a>效果展示：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210201104232750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="创造初衷：主要是作为复习，没有过多的优化内容和外观，只是当做一次课外兴趣活动-内容比较简单，没什么难点。"><a href="#创造初衷：主要是作为复习，没有过多的优化内容和外观，只是当做一次课外兴趣活动-内容比较简单，没什么难点。" class="headerlink" title="创造初衷：主要是作为复习，没有过多的优化内容和外观，只是当做一次课外兴趣活动,内容比较简单，没什么难点。"></a>创造初衷：主要是作为复习，没有过多的优化内容和外观，只是当做一次课外兴趣活动,内容比较简单，没什么难点。</h3>]]></content>
      
      
      <categories>
          
          <category> progect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智能小助手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坚持</title>
      <link href="/2021/01/31/%E9%9A%8F%E5%BF%83%E8%AE%B0/%E5%9D%9A%E6%8C%81/"/>
      <url>/2021/01/31/%E9%9A%8F%E5%BF%83%E8%AE%B0/%E5%9D%9A%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<style>h1{  text-align:center;}strong{  display:block; margin-left:60%;}p{  text-indent:2em;}</style><h1>坚持</h1><p><strong>坚持是一种自我对抗</strong>   </p><p>很久没更新了。我发现自己变得懒惰了。希望自己能坚持下去 。</p>                                                                                             <p>谁的青春不迷茫，谁能确定自己走的方向一定正确。我也时常自我反省我想要什么？我是不是懈怠了。毕竟人的精力是有限的，总会有意志不坚的时候。这时候我就会记录一下自己的状态。为迷茫的自己再次确认方向。为自己加油打气。</p><p>都说事在人为。经历这么多才能体会到，说出和做到是两码事。坚持一天、十天、一年，那十年，二十年是否能不忘初心，坚持当初最纯真的想法。坚持是一种自我的对抗,是意志力的比拼。你的对手就是想要堕落的自己，是天堂还是堕入地狱，选择权掌握在自己手中。</p><p>时间能抹平一切伤疤，让人逐渐忘记疼痛，同样时间也能磨平人的棱角，随着时间的推移，我发现我渐渐的没有的当初的斗志，不在敢尝试，不是应为懦弱而是害怕失败。似乎一件事一定要成功不允许失败，什么时候成功才是评判一切的标准，失败了就一无所获，失败就是代表淘汰。“失败是成功之母。”或许时代变了，有些东西也变了。或许有时候现实就是那么残酷，只有一次机会，No Again。</p><p>很幸运我现在还能改变，很幸运我还有机会和时间。我会坚守，from now on。</p>]]></content>
      
      
      <categories>
          
          <category> 随心记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坚持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在喧嚣中寻找宁静</title>
      <link href="/2020/11/22/%E9%9A%8F%E5%BF%83%E8%AE%B0/read/"/>
      <url>/2020/11/22/%E9%9A%8F%E5%BF%83%E8%AE%B0/read/</url>
      
        <content type="html"><![CDATA[<style>h1{  text-align:center;}strong{  display:block; margin-left:60%;}p{  text-indent:2em;}</style><h1 id="在喧嚣中寻找宁静"><a href="#在喧嚣中寻找宁静" class="headerlink" title="在喧嚣中寻找宁静"></a>在喧嚣中寻找宁静</h1><p><strong>——关于阅读的感悟</strong></p> <p>如果说读书是一种享受，那么阅读就是读书的升华，阅读是轻松自由的，没有带目的性的，纯粹的结合自己的认知去了解书中的内容，根据自己的兴趣爱好去阅读。对我来说阅读是一种对世界认知的渴望，是一种探索世界的方式，更是一种与世界沟通的方式。</p><p>我常常会在内心询问自己什么是阅读？阅读的意义是什么？为了兴趣而读，为了学习而读，还是为了追求书中的知识而读，这些问题曾困扰着我。在阅读这么多年后，我找到了自己的答案，阅读是从自己的内心出发，遵循着自己的内心的方向，选择自己感兴趣的书籍去细细品读，在读的过程中体会书中的奇妙想法和独特的见解，即使不了解或不认同，那也没关系，毕竟每个人都是独一无二的，都有自己的想法和认知。都说一千个人中心中有就有一千个哈姆雷特，其实阅读亦是如此，同一本书每一次阅读都会有不同的认知和感悟，这就是阅读的魅力所在，也是深深吸引着我的原因。阅读的意义就是在快乐中获得学习，在不知不觉间开扩我们的眼界，提升我们的素养。</p><p>阅读不是纯粹地追求知识，这更像是一种跨越时间和空间的对话。从泛黄的书籍中感受千百年前的智慧，体会作者对世界的认知，字里行间透露的是他对生活对生命的感悟，这是我现在体会不到的高度。没有那么多的生活阅历，又怎么能体会其中隐含的人生哲理，想要透过云层看阳光，也要先有一双能通过云层的眼睛。我也曾设想若干年后自己是否也能达到这种高度，将自己的所感记录成书继续传递下去，如果有那么一天那该会是多么美妙。人生只有一次，通过阅读我能了解到不同的人生，有横眉冷对千夫指，俯首甘为孺子牛的鲁迅先生，有一生都在执着追求真理的苏格拉底，有一生心底无私、天下为公的周恩来总理，从他们的人生经历，从他们的执着与坚定，我深受启迪。</p>阅读提升了我的文学素养，让我了解到文学的魅力。王国维描绘的三重人生境界，“昨夜西风凋碧树。独上高楼，望尽天涯路”。到“衣带渐宽终不悔，为伊消得人憔悴。”再到“众里寻他千百度，蓦然回首，那人却在，灯火阑珊处”。短短三句诗，无处不展现丰富的人生哲理，将年少的懵懂，青年的朝气，暮年的豁然开朗，融入诗词进而展现人的一生，让人读后回味无穷，这正是中国文学的魅力。仔细斟酌，我们不正是处于第二重境界，为了自己的理想奋发图强，夜以继日的学习，再苦再累也是无怨无悔。<p></p><p>阅读让我在忙碌的生活下保持内心平静，远离外界的喧嚣。在一个明媚的早晨，站在阳台，望向远处射来的第一缕柔和的晨光，捧起一本自己喜爱的书，轻轻地依靠在栏杆旁，感受微风吹拂过脸颊的舒畅，仔细品读着书中每一个字，每一句话，用心感受作者每一句话蕴含的真挚的情感，体会每一段话要表达的含义。阅读的同时静静地体会内心的平静和这个美好的早晨，在这一刻世界只剩下书和书中的世界。在快节奏的生活下，营造一个舒适的空间，在喧嚣的城市中，寻找一段宁静的时光，给自己创造一个属于自己的“世外桃花源”。</p><p>生活也需要放松，再好的弹簧，一直紧绷最后也难以恢复。闲暇时不如泡上一杯茶，坐在书桌，拿起一本喜爱的书，一边品茶，一边品书，一边品生活。</p>]]></content>
      
      
      <categories>
          
          <category> 随心记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在喧嚣中寻找宁静</title>
      <link href="/2020/11/22/%E9%9A%8F%E5%BF%83%E8%AE%B0/%E5%9C%A8%E5%96%A7%E5%9A%A3%E4%B8%AD%E5%AF%BB%E6%89%BE%E5%AE%81%E9%9D%99%E2%80%94%E2%80%94%E9%98%85%E8%AF%BB%E6%84%9F%E6%82%9F/"/>
      <url>/2020/11/22/%E9%9A%8F%E5%BF%83%E8%AE%B0/%E5%9C%A8%E5%96%A7%E5%9A%A3%E4%B8%AD%E5%AF%BB%E6%89%BE%E5%AE%81%E9%9D%99%E2%80%94%E2%80%94%E9%98%85%E8%AF%BB%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<style>h1{  text-align:center;}strong{  display:block; margin-left:60%;}p{  text-indent:2em;}</style><h1 id="在喧嚣中寻找宁静"><a href="#在喧嚣中寻找宁静" class="headerlink" title="在喧嚣中寻找宁静"></a>在喧嚣中寻找宁静</h1><p><strong>——关于阅读的感悟</strong></p> <p>如果说读书是一种享受，那么阅读就是读书的升华，阅读是轻松自由的，没有带目的性的，纯粹的结合自己的认知去了解书中的内容，根据自己的兴趣爱好去阅读。对我来说阅读是一种对世界认知的渴望，是一种探索世界的方式，更是一种与世界沟通的方式。</p><p>我常常会在内心询问自己什么是阅读？阅读的意义是什么？为了兴趣而读，为了学习而读，还是为了追求书中的知识而读，这些问题曾困扰着我。在阅读这么多年后，我找到了自己的答案，阅读是从自己的内心出发，遵循着自己的内心的方向，选择自己感兴趣的书籍去细细品读，在读的过程中体会书中的奇妙想法和独特的见解，即使不了解或不认同，那也没关系，毕竟每个人都是独一无二的，都有自己的想法和认知。都说一千个人中心中有就有一千个哈姆雷特，其实阅读亦是如此，同一本书每一次阅读都会有不同的认知和感悟，这就是阅读的魅力所在，也是深深吸引着我的原因。阅读的意义就是在快乐中获得学习，在不知不觉间开扩我们的眼界，提升我们的素养。</p><p>阅读不是纯粹地追求知识，这更像是一种跨越时间和空间的对话。从泛黄的书籍中感受千百年前的智慧，体会作者对世界的认知，字里行间透露的是他对生活对生命的感悟，这是我现在体会不到的高度。没有那么多的生活阅历，又怎么能体会其中隐含的人生哲理，想要透过云层看阳光，也要先有一双能通过云层的眼睛。我也曾设想若干年后自己是否也能达到这种高度，将自己的所感记录成书继续传递下去，如果有那么一天那该会是多么美妙。人生只有一次，通过阅读我能了解到不同的人生，有横眉冷对千夫指，俯首甘为孺子牛的鲁迅先生，有一生都在执着追求真理的苏格拉底，有一生心底无私、天下为公的周恩来总理，从他们的人生经历，从他们的执着与坚定，我深受启迪。</p>阅读提升了我的文学素养，让我了解到文学的魅力。王国维描绘的三重人生境界，“昨夜西风凋碧树。独上高楼，望尽天涯路”。到“衣带渐宽终不悔，为伊消得人憔悴。”再到“众里寻他千百度，蓦然回首，那人却在，灯火阑珊处”。短短三句诗，无处不展现丰富的人生哲理，将年少的懵懂，青年的朝气，暮年的豁然开朗，融入诗词进而展现人的一生，让人读后回味无穷，这正是中国文学的魅力。仔细斟酌，我们不正是处于第二重境界，为了自己的理想奋发图强，夜以继日的学习，再苦再累也是无怨无悔。<p></p><p>阅读让我在忙碌的生活下保持内心平静，远离外界的喧嚣。在一个明媚的早晨，站在阳台，望向远处射来的第一缕柔和的晨光，捧起一本自己喜爱的书，轻轻地依靠在栏杆旁，感受微风吹拂过脸颊的舒畅，仔细品读着书中每一个字，每一句话，用心感受作者每一句话蕴含的真挚的情感，体会每一段话要表达的含义。阅读的同时静静地体会内心的平静和这个美好的早晨，在这一刻世界只剩下书和书中的世界。在快节奏的生活下，营造一个舒适的空间，在喧嚣的城市中，寻找一段宁静的时光，给自己创造一个属于自己的“世外桃花源”。</p><p>生活也需要放松，再好的弹簧，一直紧绷最后也难以恢复。闲暇时不如泡上一杯茶，坐在书桌，拿起一本喜爱的书，一边品茶，一边品书，一边品生活。</p>]]></content>
      
      
      <categories>
          
          <category> 随心记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js与mysql 数据库连接</title>
      <link href="/2020/11/14/node/expressMysql/"/>
      <url>/2020/11/14/node/expressMysql/</url>
      
        <content type="html"><![CDATA[<h1 id="node-js-与-mysql-数据库连接"><a href="#node-js-与-mysql-数据库连接" class="headerlink" title="node.js 与 mysql 数据库连接"></a>node.js 与 mysql 数据库连接</h1><h2 id="配置好-node-的环境"><a href="#配置好-node-的环境" class="headerlink" title="配置好 node 的环境"></a>配置好 node 的环境</h2><ul><li>查看是否有安装 node.js node –version 出现版本号即已经安装</li><li>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装<ul><li>一路 next 到底</li></ul></li></ul><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ul><li><p>npm init -y</p></li><li><p>安装 express 框架</p><ul><li>npm install -g express-generator@4</li><li><a href="https://www.npmjs.com/package/express">https://www.npmjs.com/package/express</a></li><li>测试连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const express &#x3D; require(&#39;express&#39;)</span><br><span class="line">const app &#x3D; express()</span><br><span class="line">app.get(&#39;&#x2F;&#39;, function (req, res) &#123;</span><br><span class="line">res.send(&#39;Hello World&#39;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    app.listen(3000)</span><br></pre></td></tr></table></figure><ul><li><a href="http://localhost:3000/">http://localhost:3000</a> 页面出现 Hello World 表示安装成功</li></ul></li><li><p>安装 mysql 的依赖包 npm install mysqljs/mysql (稳定版本)</p></li></ul><h2 id="配置-mysql-相关选项"><a href="#配置-mysql-相关选项" class="headerlink" title="配置 mysql 相关选项"></a>配置 mysql 相关选项</h2><ul><li>开启本机的 mysql 服务</li><li>新建一个数据库数据库名称为特 test</li><li>在 test 数据库中新建一张表 表名为 book</li><li>表中字段 id 、 number 、name、author、description、</li><li>连接数据库<ul><li>连接代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 加载数据库驱动 钥匙</span><br><span class="line">const mysql &#x3D; require(&quot;mysql&quot;);</span><br><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">host: &quot;localhost&quot;, &#x2F;&#x2F;数据库所在的服务器的域名或者 IP 地址</span><br><span class="line">user: &quot;root&quot;, &#x2F;&#x2F; 用户名称（登录数据库的账号）</span><br><span class="line">password: &quot;130401&quot;, &#x2F;&#x2F; 登录数据库密码</span><br><span class="line">database: &quot;test&quot;, &#x2F;&#x2F; 数据库的名称</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;执行连接操作 进门</span><br><span class="line">connection.connect();</span><br><span class="line">connection.query(&#39;SELECT 1 + 1 AS solution&#39;, function (error, results, fields) &#123;</span><br><span class="line">if (error) throw error;</span><br><span class="line">console.log(&#39;The solution is: &#39;, results[0].solution);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>成功后 后台显示 The solution is:2</li></ul></li></ul><h2 id="mysql-的增删改查"><a href="#mysql-的增删改查" class="headerlink" title="mysql 的增删改查"></a>mysql 的增删改查</h2><ul><li>对于 mysql 来说 增删改查的不同就是在于对 connection.query 进行不同的操作</li><li>只改变 sql 和 data</li></ul><h3 id="mysql-增加数据"><a href="#mysql-增加数据" class="headerlink" title="mysql 增加数据"></a>mysql 增加数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 加载数据库驱动 钥匙</span><br><span class="line">const mysql &#x3D; require(&quot;mysql&quot;);</span><br><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">  host: &quot;localhost&quot;, &#x2F;&#x2F;数据库所在的服务器的域名或者IP地址</span><br><span class="line">  user: &quot;root&quot;, &#x2F;&#x2F; 用户名称（登录数据库的账号）</span><br><span class="line">  password: &quot;130401&quot;, &#x2F;&#x2F; 登录数据库密码</span><br><span class="line">  database: &quot;test&quot;, &#x2F;&#x2F; 数据库的名称</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;执行连接操作  进门</span><br><span class="line">connection.connect();</span><br><span class="line">&#x2F;&#x2F;操作数据库</span><br><span class="line"></span><br><span class="line">let sql &#x3D; &quot;insert into book set ?&quot;;</span><br><span class="line">let data &#x3D; &#123;</span><br><span class="line">  number: &quot;k-5612&quot;,</span><br><span class="line">  name: &quot;你好明天 &quot;,</span><br><span class="line">  author: &quot;马丁&quot;,</span><br><span class="line">  description: &quot;爱情故事&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">connection.query(sql, data, function (error, results, fields) &#123;</span><br><span class="line">  if (error) throw error;</span><br><span class="line">  if (results.affectedRows &gt; 0) &#123;</span><br><span class="line">      &#x2F;&#x2F;成功后affectedRows为1</span><br><span class="line">    console.log(&quot;插入数据成功&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;关闭数据库</span><br><span class="line">connection.end();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mysql-删除数据"><a href="#mysql-删除数据" class="headerlink" title="mysql 删除数据"></a>mysql 删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 加载数据库驱动 钥匙</span><br><span class="line"> const mysql &#x3D; require(&quot;mysql&quot;);</span><br><span class="line"> const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">   host: &quot;localhost&quot;, &#x2F;&#x2F;数据库所在的服务器的域名或者IP地址</span><br><span class="line">   user: &quot;root&quot;, &#x2F;&#x2F; 用户名称（登录数据库的账号）</span><br><span class="line">   password: &quot;130401&quot;, &#x2F;&#x2F; 登录数据库密码</span><br><span class="line">   database: &quot;test&quot;, &#x2F;&#x2F; 数据库的名称</span><br><span class="line"> &#125;);</span><br><span class="line"> &#x2F;&#x2F;执行连接操作  进门</span><br><span class="line"> connection.connect();</span><br><span class="line"> &#x2F;&#x2F;操作数据库</span><br><span class="line"></span><br><span class="line"> let sql &#x3D; &quot;delete  from book where id&#x3D;?&quot;; &#x2F;&#x2F;注意这里没有逗号，严格遵循mysql的语法规则</span><br><span class="line"> let data &#x3D; [1];</span><br><span class="line"> connection.query(sql, data, function (error, results, fields) &#123;</span><br><span class="line">   if (error) throw error;</span><br><span class="line">   if (results.affectedRows &gt; 0) &#123;</span><br><span class="line">     console.log(&quot;删除数据数据成功&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> &#x2F;&#x2F;关闭数据库</span><br><span class="line"> connection.end();</span><br></pre></td></tr></table></figure><h3 id="mysql-更新数据"><a href="#mysql-更新数据" class="headerlink" title="mysql 更新数据"></a>mysql 更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 加载数据库驱动 钥匙</span><br><span class="line"></span><br><span class="line">const mysql &#x3D; require(&quot;mysql&quot;);</span><br><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line"> host: &quot;localhost&quot;, &#x2F;&#x2F;数据库所在的服务器的域名或者IP地址</span><br><span class="line"> user: &quot;root&quot;, &#x2F;&#x2F; 用户名称（登录数据库的账号）</span><br><span class="line"> password: &quot;130401&quot;, &#x2F;&#x2F; 登录数据库密码</span><br><span class="line"> database: &quot;test&quot;, &#x2F;&#x2F; 数据库的名称</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;执行连接操作 进门</span><br><span class="line">connection.connect();</span><br><span class="line">&#x2F;&#x2F;操作数据库</span><br><span class="line">let sql &#x3D; &quot;update book set number&#x3D;?,name&#x3D;?,author&#x3D;?,description&#x3D;?where id&#x3D;?&quot;; &#x2F;&#x2F;注意这里没有逗号，严格遵循mysql的语法规则</span><br><span class="line">let data &#x3D; [&quot;k-15454645&quot;, &quot;简单的回答&quot;, &quot;瞿俊&quot;, &quot;一本关于爱情的书&quot;, 1];</span><br><span class="line">connection.query(sql, data, function (error, results, fields) &#123;</span><br><span class="line"> if (error) throw error;</span><br><span class="line"> if (results.affectedRows &gt; 0) &#123;</span><br><span class="line">  console.log(&quot;插入数据成功&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;关闭数据库</span><br><span class="line"></span><br><span class="line">connection.end();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mysql-查找数据"><a href="#mysql-查找数据" class="headerlink" title="mysql 查找数据"></a>mysql 查找数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 加载数据库驱动 钥匙</span><br><span class="line">const mysql &#x3D; require(&quot;mysql&quot;);</span><br><span class="line">const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">  host: &quot;localhost&quot;, &#x2F;&#x2F;数据库所在的服务器的域名或者IP地址</span><br><span class="line">  user: &quot;root&quot;, &#x2F;&#x2F; 用户名称（登录数据库的账号）</span><br><span class="line">  password: &quot;130401&quot;, &#x2F;&#x2F; 登录数据库密码</span><br><span class="line">  database: &quot;test&quot;, &#x2F;&#x2F; 数据库的名称</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;执行连接操作  进门</span><br><span class="line">connection.connect();</span><br><span class="line">&#x2F;&#x2F;操作数据库</span><br><span class="line"></span><br><span class="line">let sql &#x3D; &quot;select * from book where id &#x3D; ?&quot;; &#x2F;&#x2F;注意这里没有逗号，严格遵循mysql的语法规则</span><br><span class="line">let data &#x3D; [2];</span><br><span class="line">connection.query(sql, data, function (error, results, fields) &#123;</span><br><span class="line">  if (error) throw error;</span><br><span class="line"></span><br><span class="line">  console.log(results);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;关闭数据库</span><br><span class="line">connection.end();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="封装成-API"><a href="#封装成-API" class="headerlink" title="封装成 API"></a>封装成 API</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; 加载数据库驱动 钥匙</span><br><span class="line">const mysql &#x3D; require(&quot;mysql&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第一个参数为 SQL 作语句 第二格参数为数据 第三个为回调函数</span><br><span class="line">exports.baseMysqlAPI &#x3D; (sql, data, callback) &#x3D;&gt; &#123;</span><br><span class="line">  const connection &#x3D; mysql.createConnection(&#123;</span><br><span class="line">    host: &quot;localhost&quot;, &#x2F;&#x2F;数据库所在的服务器的域名或者IP地址</span><br><span class="line">    user: &quot;root&quot;, &#x2F;&#x2F; 用户名称（登录数据库的账号）</span><br><span class="line">    password: &quot;130401&quot;, &#x2F;&#x2F; 登录数据库密码</span><br><span class="line">    database: &quot;test&quot;, &#x2F;&#x2F; 数据库的名称</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F;执行连接操作  进门</span><br><span class="line">  connection.connect();</span><br><span class="line">  &#x2F;&#x2F;操作数据库</span><br><span class="line"></span><br><span class="line">  connection.query(sql, data, function (error, results, fields) &#123;</span><br><span class="line">    if (error) throw error;</span><br><span class="line">    callback(results);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#x2F;&#x2F;关闭数据库</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const db &#x3D; require(&quot;..&#x2F;API&#x2F;mysqlAPI&quot;);&#x2F;&#x2F;加载封装的API</span><br><span class="line">&#x2F;&#x2F;插入</span><br><span class="line">&#x2F;&#x2F; let sql &#x3D; &quot;insert into book set ?&quot;;</span><br><span class="line">&#x2F;&#x2F; let data &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F;   number: &quot;k-5612&quot;,</span><br><span class="line">&#x2F;&#x2F;   name: &quot;jgsjkjf &quot;,</span><br><span class="line">&#x2F;&#x2F;   author: &quot;马丁&quot;,</span><br><span class="line">&#x2F;&#x2F;   description: &quot;爱情故事&quot;,</span><br><span class="line">&#x2F;&#x2F; &#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据ID更新</span><br><span class="line">&#x2F;&#x2F; let sql &#x3D; &quot;update  book set number&#x3D;?,name&#x3D;?,author&#x3D;?,description&#x3D;?where id&#x3D;?&quot;; &#x2F;&#x2F;注意这里没有逗号，严格遵循mysql的语法规则</span><br><span class="line">&#x2F;&#x2F; let data &#x3D; [&quot;k-15454645&quot;, &quot;简单的回答&quot;, &quot;瞿ffs俊&quot;, &quot;一本关于爱情的书&quot;, 1];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据ID删除</span><br><span class="line">&#x2F;&#x2F; let sql &#x3D; &quot;delete  from book where id&#x3D;?&quot;; &#x2F;&#x2F;注意这里没有逗号，严格遵循mysql的语法规则</span><br><span class="line">&#x2F;&#x2F; let data &#x3D; [25];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据ID查找</span><br><span class="line">let sql &#x3D; &quot;select * from book where id &#x3D; ?&quot;; &#x2F;&#x2F;注意这里没有逗号，严格遵循mysql的语法规则</span><br><span class="line">let data &#x3D; [2];</span><br><span class="line"></span><br><span class="line">db.baseMysqlAPI(sql, data, (res) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node-Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node老师笔记</title>
      <link href="/2020/11/14/node/node/"/>
      <url>/2020/11/14/node/node/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-介绍"><a href="#Node-介绍" class="headerlink" title="Node 介绍"></a>Node 介绍</h1><h2 id="为什么要学习-Node-js"><a href="#为什么要学习-Node-js" class="headerlink" title="为什么要学习 Node.js"></a>为什么要学习 Node.js</h2><ul><li>企业需求<ul><li>具有服务端开发经验更改</li><li>front-end</li><li>back-end</li><li>全栈开发工程师</li><li>基本的网站开发能力<ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li>多人社区</li></ul></li></ul><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md"><img src alt="image-20200317114503403"></a></p><h2 id="Node-js-是什么"><a href="#Node-js-是什么" class="headerlink" title="Node.js 是什么"></a>Node.js 是什么</h2><ul><li>Node.js 是 JavaScript 运行时</li><li>通俗易懂的讲，Node.js 是 JavaScript 的运行平台</li><li>Node.js 既不是语言，也不是框架，它是一个平台</li><li>浏览器中的 JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js 中的 JavaScript<ul><li>没有 Bom，Dom</li><li>EcmaScript</li><li>在 Node 中这个 JavaScript 执行环境为 JavaScript 提供了一些服务器级别的 API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http 服务器</li></ul></li></ul></li><li>构建与 Chrome 的 V8 引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome 的 V8 引擎是目前公认的解析执行 JavaScript 代码最快的</li><li>Node.js 的作者把 Google Chrome 中的 V8 引擎移植出来，开发了一个独立的 JavaScript 运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven 事件驱动</li><li>non-blocking I/O mode 非阻塞 I/O 模型（异步）</li><li>ightweight and efficent. 轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数 JavaScript 相关的包都存放在 npm 上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="Node-能做什么"><a href="#Node-能做什么" class="headerlink" title="Node 能做什么"></a>Node 能做什么</h2><ul><li>web 服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c 语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装-Node-环境"><a href="#安装-Node-环境" class="headerlink" title="安装 Node 环境"></a>安装 Node 环境</h2><ul><li>查看 Node 环境的版本号</li><li>下载：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></li><li>安装：<ul><li>傻瓜式安装，一路<code>next</code></li><li>安装过再次安装会升级</li></ul></li><li>确认 Node 环境是否安装成功<ul><li>查看 node 的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li>配置环境变量</li></ul><h2 id="解析执行-JavaScript"><a href="#解析执行-JavaScript" class="headerlink" title="解析执行 JavaScript"></a>解析执行 JavaScript</h2><ol><li>创建编写 JavaScript 脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node 文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;浏览器中的JavaScript是没有文件操作能力的</span><br><span class="line">&#x2F;&#x2F;但是Node中的JavaScript具有文件操作能力</span><br><span class="line">&#x2F;&#x2F;fs是file-system的简写，就是文件系统的意思</span><br><span class="line">&#x2F;&#x2F;在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span><br><span class="line">&#x2F;&#x2F;在fs这个和兴模块中，就提供了人所有文件操作相关的API</span><br><span class="line">&#x2F;&#x2F;例如 fs.readFile就是用来读取文件的</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  1.使用fs核心模块</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.读取文件</span><br><span class="line">fs.readFile(&#39;.&#x2F;data&#x2F;a.txt&#39;,function(err,data)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">        console.log(&#39;文件读取失败&#39;);</span><br><span class="line">   &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">         console.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;  1.使用fs核心模块</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.将数据写入文件</span><br><span class="line">fs.writeFile(&#39;.&#x2F;data&#x2F;a.txt&#39;,&#39;我是文件写入的信息&#39;,function(err,data)&#123;</span><br><span class="line">   if(err)&#123;</span><br><span class="line">        console.log(&#39;文件写入失败&#39;);</span><br><span class="line">   &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">         console.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.加载http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用http.createServer()创建一个web服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.服务器要做的事儿</span></span><br><span class="line"><span class="comment">// 提供服务：对数据服务</span></span><br><span class="line"><span class="comment">// 发请求</span></span><br><span class="line"><span class="comment">//    接收请求</span></span><br><span class="line"><span class="comment">//    处理请求</span></span><br><span class="line"><span class="comment">//    反馈（发送响应）</span></span><br><span class="line"><span class="comment">//    当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;收到客户的请求了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.绑定端口号，启动服务</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;runing...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Node-中的模块系统"><a href="#Node-中的模块系统" class="headerlink" title="Node 中的模块系统"></a>Node 中的模块系统</h1><p>使用 Node 编写应用程序主要就是在使用：</p><ul><li>EcmaScript 语言<ul><li>和浏览器一样，在 Node 中没有 Bom 和 Dom</li></ul></li><li>核心模块<ul><li>文件操作的 fs</li><li>http 服务操作的 http</li><li>url 路径操作模块</li><li>path 路径处理模块</li><li>os 操作系统信息</li></ul></li><li>第三方模块<ul><li>art-template</li><li>必须通过 npm 来下载才可以使用</li></ul></li><li>自己写的模块<ul><li>自己创建的文件</li></ul></li></ul><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在 node 中没有全局作用域，它是文件模块作用域】</li><li>通信规则<ul><li>加载 require</li><li>导出 exports</li></ul></li></ul><h2 id="CommonJS-模块规范"><a href="#CommonJS-模块规范" class="headerlink" title="CommonJS 模块规范"></a>CommonJS 模块规范</h2><p>在 Node 中的 JavaScript 还有一个重要的概念，模块系统。</p><ul><li><p>模块作用域</p></li><li><p>使用 require 方法来加载模块</p></li><li><p>使用 exports 接口对象来导出模板中的成员</p><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 自定义变量名 &#x3D; require(&#39;模块&#39;)</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul><li><p>Node 中是模块作用域，默认文件中所有的成员只在当前模块有效</p></li><li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p><p>导出多个成员（必须在对象中）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">exports.a &#x3D; 123;</span><br><span class="line">exports.b &#x3D; function()&#123;</span><br><span class="line">    console.log(&#39;bbb&#39;)</span><br><span class="line">&#125;;</span><br><span class="line">exports.c &#x3D; &#123;</span><br><span class="line">    foo:&quot;bar&quot;</span><br><span class="line">&#125;;</span><br><span class="line">exports.d &#x3D; &#39;hello&#39;;</span><br></pre></td></tr></table></figure><p>导出单个成员（拿到的就是函数，字符串）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#39;hello&#39;;</span><br></pre></td></tr></table></figure><p>以下情况会覆盖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#39;hello&#39;;</span><br><span class="line">&#x2F;&#x2F;后者会覆盖前者</span><br><span class="line">module.exports &#x3D; function add(x,y) &#123;</span><br><span class="line">    return x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过以下方法来导出多个成员：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    foo &#x3D; &#39;hello&#39;,</span><br><span class="line">    add:function()&#123;</span><br><span class="line">        return x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="模块原理"><a href="#模块原理" class="headerlink" title="模块原理"></a>模块原理</h2><p>exports 和<code>module.exports</code>的一个引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">console.log(exports &#x3D;&#x3D;&#x3D; module.exports);    &#x2F;&#x2F;true</span><br><span class="line"></span><br><span class="line">exports.foo &#x3D; &#39;bar&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">module.exports.foo &#x3D; &#39;bar&#39;;</span><br><span class="line">当给exports重新赋值后，exports！&#x3D; module.exports.</span><br><span class="line">最终return的是module.exports,无论exports中的成员是什么都没用。</span><br><span class="line">真正去使用的时候：</span><br><span class="line">    导出单个成员：exports.xxx &#x3D; xxx;</span><br><span class="line">    导出多个成员：module.exports 或者 modeule.exports &#x3D; &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引用服务</span><br><span class="line">var http &#x3D; require(&#39;http&#39;);</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line">&#x2F;&#x2F; 引用模板</span><br><span class="line">var template &#x3D; require(&#39;art-template&#39;);</span><br><span class="line">&#x2F;&#x2F; 创建服务</span><br><span class="line">var server &#x3D; http.createServer();</span><br><span class="line">&#x2F;&#x2F; 公共路径</span><br><span class="line">var wwwDir &#x3D; &#39;D:&#x2F;app&#x2F;www&#39;;</span><br><span class="line">server.on(&#39;request&#39;, function (req, res) &#123;</span><br><span class="line">    var url &#x3D; req.url;</span><br><span class="line">    &#x2F;&#x2F; 读取文件</span><br><span class="line">    fs.readFile(&#39;.&#x2F;template-apche.html&#39;, function (err, data) &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            return res.end(&#39;404 Not Found&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        fs.readdir(wwwDir, function (err, files) &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                return res.end(&#39;Can not find www Dir.&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 使用模板引擎解析替换data中的模板字符串</span><br><span class="line">            &#x2F;&#x2F; 去xmpTempleteList.html中编写模板语法</span><br><span class="line">            var htmlStr &#x3D; template.render(data.toString(), &#123;</span><br><span class="line">                title: &#39;D:&#x2F;app&#x2F;www&#x2F; 的索引&#39;,</span><br><span class="line">                files:files</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F; 发送响应数据</span><br><span class="line">            res.end(htmlStr);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(3000, function () &#123;</span><br><span class="line">    console.log(&#39;running....&#39;);</span><br><span class="line">&#125;)</span><br><span class="line">1.jQuery中的each 和 原生JavaScript方法forEach的区别：</span><br><span class="line">    提供源头：</span><br><span class="line">        原生js是es5提供的（不兼容IE8）,</span><br><span class="line">        jQuery的each是jQuery第三方库提供的（如果要使用需要用2以下的版本也就是1.版本）,它的each方法主要用来遍历jQuery实例对象（伪数组）,同时也可以做低版本forEach的替代品,jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（[].slice.call(jQuery实例对象)）才能使用</span><br><span class="line">2.模块中导出多个成员和导出单个成员</span><br><span class="line">3.301和302的区别：</span><br><span class="line">    301永久重定向,浏览器会记住</span><br><span class="line">    302临时重定向</span><br><span class="line">4.exports和module.exports的区别:</span><br><span class="line">    每个模块中都有一个module对象</span><br><span class="line">    module对象中有一个exports对象</span><br><span class="line">    我们可以把需要导出的成员都挂载到module.exports接口对象中</span><br><span class="line">    也就是&#96;module.exports.xxx &#x3D; xxx&#96;的方式</span><br><span class="line">    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫&#96;exports&#96;</span><br><span class="line">    &#96;exports &#x3D;&#x3D;&#x3D; module.exports&#96;结果为true,所以完全可以&#96;exports.xxx &#x3D; xxx&#96;</span><br><span class="line">    当一个模块需要导出单个成员的时候必须使用&#96;module.exports &#x3D; xxx&#96;的方式，&#x3D;,使用&#96;exports &#x3D; xxx&#96;不管用,因为每个模块最终return的是module.exports,而exports只是module.exports的一个引用,所以&#96;exports&#96;即使重新赋值,也不会影响&#96;module.exports&#96;。</span><br><span class="line">    有一种赋值方式比较特殊：&#96;exports &#x3D; module.exports&#96;这个用来新建立引用关系的。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="require-的加载规则"><a href="#require-的加载规则" class="headerlink" title="require 的加载规则"></a>require 的加载规则</h1><ul><li>核心模块<ul><li>模块名</li></ul></li><li>第三方模块<ul><li>模块名</li></ul></li><li>用户自己写的<ul><li>路径</li></ul></li></ul><h2 id="require-的加载规则："><a href="#require-的加载规则：" class="headerlink" title="require 的加载规则："></a>require 的加载规则：</h2><ul><li><p>优先从缓存加载</p></li><li><p>判断模块标识符</p><ul><li><p>核心模块</p></li><li><p>自己写的模块（路径形式的模块）</p></li><li><p>第三方模块（node_modules）</p><ul><li><p>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</p></li><li><p>npm</p><ul><li>开发人员可以把写好的框架库发布到 npm 上</li><li>使用者通过 npm 命令来下载</li></ul></li><li><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var 名称 &#x3D; require(&#39;npm install【下载包】 的包名&#39;)</span><br></pre></td></tr></table></figure><ul><li>node_modules/express/package.json main</li><li>如果 package.json 或者 main 不成立，则查找被选择项：index.js</li><li>如果以上条件都不满足，则继续进入上一级目录中的 node_modules 按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li></ul></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 如果非路径形式的标识</span><br><span class="line">&#x2F;&#x2F; 路径形式的标识：</span><br><span class="line">    &#x2F;&#x2F; .&#x2F;  当前目录 不可省略</span><br><span class="line">    &#x2F;&#x2F; ..&#x2F;  上一级目录  不可省略</span><br><span class="line">    &#x2F;&#x2F;  &#x2F;xxx也就是D:&#x2F;xxx</span><br><span class="line">    &#x2F;&#x2F; 带有绝对路径几乎不用（D:&#x2F;a&#x2F;foo.js）</span><br><span class="line">&#x2F;&#x2F; 首位表示的是当前文件模块所属磁盘根目录</span><br><span class="line">&#x2F;&#x2F; require(&#39;.&#x2F;a&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 核心模块</span><br><span class="line">&#x2F;&#x2F; 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span><br><span class="line">require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第三方模块</span><br><span class="line">&#x2F;&#x2F; 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require(&#39;包名&#39;)来加载才可以使用</span><br><span class="line">&#x2F;&#x2F; 第三方包的名字不可能和核心模块的名字是一样的</span><br><span class="line">&#x2F;&#x2F; 既不是核心模块，也不是路径形式的模块</span><br><span class="line">&#x2F;&#x2F;      先找到当前文所述目录的node_modules</span><br><span class="line">&#x2F;&#x2F;      然后找node_modules&#x2F;art-template目录</span><br><span class="line">&#x2F;&#x2F;      node_modules&#x2F;art-template&#x2F;package.json</span><br><span class="line">&#x2F;&#x2F;      node_modules&#x2F;art-template&#x2F;package.json中的main属性</span><br><span class="line">&#x2F;&#x2F;      main属性记录了art-template的入口模块</span><br><span class="line">&#x2F;&#x2F;      然后加载使用这个第三方包</span><br><span class="line">&#x2F;&#x2F;      实际上最终加载的还是文件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;      如果package.json不存在或者mian指定的入口模块不存在</span><br><span class="line">&#x2F;&#x2F;      则node会自动找该目录下的index.js</span><br><span class="line">&#x2F;&#x2F;      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">        &#x2F;&#x2F; 如果条件都不满足则会进入上一级目录进行查找</span><br><span class="line">&#x2F;&#x2F; 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span><br><span class="line">var template &#x3D; require(&#39;art-template&#39;);</span><br></pre></td></tr></table></figure><h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 咱们所使用的所有文件操作的API都是异步的</span><br><span class="line">&#x2F;&#x2F; 就像ajax请求一样</span><br><span class="line">&#x2F;&#x2F; 读取文件</span><br><span class="line">&#x2F;&#x2F; 文件操作中 .&#x2F; 相当于当前模块所处磁盘根目录</span><br><span class="line">&#x2F;&#x2F; .&#x2F;index.txt    相对于当前目录</span><br><span class="line">&#x2F;&#x2F; &#x2F;index.txt    相对于当前目录</span><br><span class="line">&#x2F;&#x2F; &#x2F;index.txt   绝对路径,当前文件模块所处根目录</span><br><span class="line">&#x2F;&#x2F; d:express&#x2F;index.txt   绝对路径</span><br><span class="line">fs.readFile(&#39;.&#x2F;index.txt&#39;,function(err,data)&#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">       return  console.log(&#39;读取失败&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data.toString());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>模块操作路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在模块加载中，相对路径中的.&#x2F;不能省略</span><br><span class="line">&#x2F;&#x2F; 这里省略了.也是磁盘根目录</span><br><span class="line">require(&#39;.&#x2F;index&#39;)(&#39;hello&#39;)</span><br></pre></td></tr></table></figure><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li>node package manage(node 包管理器)</li><li>通过 npm 命令安装 jQuery 包（npm install –save jquery），在安装时加上–save 会主动生成说明书文件信息（将安装文件的信息添加到 package.json 里面）</li></ul><h3 id="npm-网站"><a href="#npm-网站" class="headerlink" title="npm 网站"></a>npm 网站</h3><blockquote><p>npmjs.com 网站 是用来搜索 npm 包的</p></blockquote><h3 id="npm-命令行工具"><a href="#npm-命令行工具" class="headerlink" title="npm 命令行工具"></a>npm 命令行工具</h3><p>npm 是一个命令行工具，只要安装了 node 就已经安装了 npm。</p><p>npm 也有版本概念，可以通过<code>npm --version</code>来查看 npm 的版本</p><p>升级 npm(自己升级自己)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>npm init(生成 package.json 说明书文件)<ul><li>npm init -y(可以跳过向导，快速生成)</li></ul></li><li>npm install<ul><li>一次性把 dependencies 选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li>npm install 包名<ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（package.json 文件中的 dependencies 选项）</li><li>简写（npm i 包名）</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li>npm help<ul><li>查看使用帮助</li></ul></li><li>npm 命令 –help<ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h3 id="解决-npm-被墙问题"><a href="#解决-npm-被墙问题" class="headerlink" title="解决 npm 被墙问题"></a>解决 npm 被墙问题</h3><p>npm 存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm%E6%B7%98%E5%AE%9D%E7%9A%84%E5%BC%80%E5%8F%91%E5%9B%A2%E9%98%9F%E6%8A%8Anpm%E5%9C%A8%E5%9B%BD%E5%86%85%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%87%E4%BB%BD%EF%BC%89%E3%80%82">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><p>安装淘宝的 cnpm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org;</span><br><span class="line">#在任意目录执行都可以</span><br><span class="line">#--global表示安装到全局，而非当前目录</span><br><span class="line">#--global不能省略，否则不管用</span><br><span class="line">npm install --global cnpm</span><br></pre></td></tr></table></figure><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#走国外的npm服务器下载jQuery包，速度比较慢</span><br><span class="line">npm install jQuery;</span><br><span class="line"></span><br><span class="line">#使用cnpm就会通过淘宝的服务器来下载jQuery</span><br><span class="line">cnpm install jQuery;</span><br></pre></td></tr></table></figure><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --registry&#x3D;https:&#x2F;&#x2F;npm.taobao.org;</span><br></pre></td></tr></table></figure><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;npm.taobao.org;</span><br><span class="line"></span><br><span class="line">#查看npm配置信息</span><br><span class="line">npm config list;</span><br></pre></td></tr></table></figure><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">D:\code\node中的模块系统&gt;npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See &#96;npm help json&#96; for definitive documentation on these fields</span><br><span class="line">and exactly what they do.</span><br><span class="line"></span><br><span class="line">Use &#96;npm install &lt;pkg&gt;&#96; afterwards to install a package and</span><br><span class="line">save it as a dependency in the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (node中的模块系统)</span><br><span class="line">Sorry, name can only contain URL-friendly characters.</span><br><span class="line">package name: (node中的模块系统) cls</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: 这是一个测试项目</span><br><span class="line">entry point: (main.js)</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author: xiaochen</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to D:\code\node中的模块系统\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;cls&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;这是一个测试项目&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;main.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;xiaochen&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this OK? (yes) yes</span><br></pre></td></tr></table></figure><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h2 id="package-json-和-package-lock-json"><a href="#package-json-和-package-lock-json" class="headerlink" title="package.json 和 package-lock.json"></a>package.json 和 package-lock.json</h2><p>npm 5 以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5 以后才加入这个文件</p><p>当你安装包的时候，npm 都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li><p>npm5 以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</p></li><li><p>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</p></li><li><pre><code>package-lock.json&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这个文件会包含&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;node_modules&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  中所有包的信息（版本，下载地址。。。）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 这样的话重新&amp;#96;npm install&amp;#96;的时候速度就可以提升&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 从文件来看，有一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;lock&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  称之为锁&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 这个&amp;#96;lock&amp;#96;使用来锁版本的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 如果项目依赖了&amp;#96;1.1.1&amp;#96;版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 如果你重新 install 其实会下载最细版本，而不是&amp;#96;1.1.1&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - &amp;#96;package-lock.json&amp;#96;的另外一个作用就是锁定版本号，防止自动升级&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## path 路径操作模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; 参考文档：https:&amp;#x2F;&amp;#x2F;nodejs.org&amp;#x2F;docs&amp;#x2F;latest-v13.x&amp;#x2F;api&amp;#x2F;path.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- path.basename：获取路径的文件名，默认包含扩展名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- path.dirname：获取路径中的目录部分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- path.extname：获取一个路径中的扩展名部分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- path.parse：把路径转换为对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - root：根路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - dir：目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - base：包含后缀名的文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - ext：后缀名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - name：不包含后缀名的文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- path.join：拼接路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- path.isAbsolute：判断一个路径是否为绝对路径[![image-20200315150610001]()](https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;smallC-L-Y&amp;#x2F;Demo&amp;#x2F;blob&amp;#x2F;notes&amp;#x2F;nodeJS学习笔记.md)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Node 中的其它成员(**dirname,**filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在每个模块中，除了&amp;#96;require&amp;#96;,&amp;#96;exports&amp;#96;等模块相关的 API 之外，还有两个特殊的成员：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;__dirname&amp;#96;，是一个成员，可以用来**动态**获取当前文件模块所属目录的绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;__filename&amp;#96;，可以用来**动态**获取当前文件的绝对路径（包含文件名）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;__dirname&amp;#96;和&amp;#96;filename&amp;#96;是不受执行 node 命令所属路径影响的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [![image-20200315151551873]()](https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;smallC-L-Y&amp;#x2F;Demo&amp;#x2F;blob&amp;#x2F;notes&amp;#x2F;nodeJS学习笔记.md)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在文件操作中，使用相对路径是不可靠的，因为 node 中文件操作的路径被设计为相对于执行 node 命令所处的路径。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;就可以使用&amp;#96;__dirname&amp;#96;或者&amp;#96;__filename&amp;#96;来帮助我们解决这个问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用&amp;#96;path.join()&amp;#96;来辅助拼接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;var fs = require(&#39;fs&#39;);var path = require(&#39;path&#39;);</code></pre></li></ul><p>// console.log(__dirname + ‘a.txt’);<br>// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径<br>fs.readFile(path.join(__dirname + ‘/a.txt’),’utf8’,function(err,data){<br>    if(err){<br>        throw err<br>    }<br>    console.log(data);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</span><br><span class="line"></span><br><span class="line">&gt; **注意：**</span><br><span class="line">&gt;</span><br><span class="line">&gt; **模块中的路径标识和文件操作中的相对路径标识不一致**</span><br><span class="line">&gt;</span><br><span class="line">&gt; **模块中的路径标识就是相对于当前文件模块，不受 node 命令所处路径影响**</span><br><span class="line"></span><br><span class="line"># Express（快速的）</span><br><span class="line"></span><br><span class="line">作者：Tj</span><br><span class="line"></span><br><span class="line">原生的 http 在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</span><br><span class="line"></span><br><span class="line">在 node 中有很多 web 开发框架。主要学习 express</span><br><span class="line"></span><br><span class="line">- &#96;http:&#x2F;&#x2F;expressjs.com&#x2F;&#96;,其中主要封装的是 http。</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  &#x2F;&#x2F; 1 安装</span><br><span class="line">  &#x2F;&#x2F; 2 引包</span><br><span class="line">  var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">  &#x2F;&#x2F; 3 创建服务器应用程序</span><br><span class="line">  &#x2F;&#x2F;      也就是原来的http.createServer();</span><br><span class="line">  var app &#x3D; express();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 公开指定目录</span><br><span class="line">  &#x2F;&#x2F; 只要通过这样做了，就可以通过&#x2F;public&#x2F;xx的方式来访问public目录中的所有资源</span><br><span class="line">  &#x2F;&#x2F; 在Express中开放资源就是一个API的事</span><br><span class="line">  app.use(&#39;&#x2F;public&#x2F;&#39;,express.static(&#39;&#x2F;public&#x2F;&#39;));</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;模板引擎在Express中开放模板也是一个API的事</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 当服务器收到get请求 &#x2F; 的时候，执行回调处理函数</span><br><span class="line">  app.get(&#39;&#x2F;&#39;,function(req,res)&#123;</span><br><span class="line">      res.send(&#39;hello express&#39;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 相当于server.listen</span><br><span class="line">  app.listen(3000,function()&#123;</span><br><span class="line">      console.log(&#39;app is runing at port 3000&#39;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="学习-Express"><a href="#学习-Express" class="headerlink" title="学习 Express"></a>学习 Express</h3><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><h5 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md"><img src alt="image-20200310123723079"></a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install express</span><br></pre></td></tr></table></figure><h5 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world:"></a>hello world:<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md"><img src alt="image-20200310124850557"></a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入express</span><br><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1. 创建app</span><br><span class="line">var app &#x3D; express();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  2.</span><br><span class="line">app.get(&#39;&#x2F;&#39;,function(req,res)&#123;</span><br><span class="line">    &#x2F;&#x2F; 1</span><br><span class="line">    &#x2F;&#x2F; res.write(&#39;Hello&#39;);</span><br><span class="line">    &#x2F;&#x2F; res.write(&#39;World&#39;);</span><br><span class="line">    &#x2F;&#x2F; res.end()</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 2</span><br><span class="line">    &#x2F;&#x2F; res.end(&#39;hello world&#39;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 3</span><br><span class="line">    res.send(&#39;hello world&#39;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000,function()&#123;</span><br><span class="line">    console.log(&#39;express app is runing...&#39;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h5><p>路由：</p><ul><li>请求方法</li><li>请求路径</li><li>请求处理函数</li></ul><p>get:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;当你以get方法请求&#x2F;的时候，执行对应的处理函数</span><br><span class="line">app.get(&#39;&#x2F;&#39;,function(req,res)&#123;</span><br><span class="line">    res.send(&#39;hello world&#39;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;当你以post方法请求&#x2F;的时候，执行对应的处理函数</span><br><span class="line">app.post(&#39;&#x2F;&#39;,function(req,res)&#123;</span><br><span class="line">    res.send(&#39;hello world&#39;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Express-静态服务-API"><a href="#Express-静态服务-API" class="headerlink" title="Express 静态服务 API"></a>Express 静态服务 API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span><br><span class="line">app.use(express.static(&#39;public&#39;));</span><br><span class="line"></span><br><span class="line">app.use(express.static(&#39;files&#39;));</span><br><span class="line"></span><br><span class="line">app.use(&#39;&#x2F;stataic&#39;,express.static(&#39;public&#39;));</span><br><span class="line">&#x2F;&#x2F; 引入express</span><br><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建app</span><br><span class="line">var app &#x3D; express();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开放静态资源</span><br><span class="line">&#x2F;&#x2F; 1.当以&#x2F;public&#x2F;开头的时候，去.&#x2F;public&#x2F;目录中找对应资源</span><br><span class="line">&#x2F;&#x2F; 访问：http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;public&#x2F;login.html</span><br><span class="line">app.use(&#39;&#x2F;public&#x2F;&#39;,express.static(&#39;.&#x2F;public&#x2F;&#39;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.当省略第一个参数的时候，可以通过省略&#x2F;public的方式来访问</span><br><span class="line">&#x2F;&#x2F; 访问：http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;login.html</span><br><span class="line">&#x2F;&#x2F; app.use(express.static(&#39;.&#x2F;public&#x2F;&#39;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3.访问：http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;a&#x2F;login.html</span><br><span class="line">&#x2F;&#x2F; a相当于public的别名</span><br><span class="line">&#x2F;&#x2F; app.use(&#39;&#x2F;a&#x2F;&#39;,express.static(&#39;.&#x2F;public&#x2F;&#39;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">app.get(&#39;&#x2F;&#39;,function(req,res)&#123;</span><br><span class="line">    res.end(&#39;hello world&#39;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000,function()&#123;</span><br><span class="line">    console.log(&#39;express app is runing...&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="在-Express-中配置使用art-templete模板引擎"><a href="#在-Express-中配置使用art-templete模板引擎" class="headerlink" title="在 Express 中配置使用art-templete模板引擎"></a>在 Express 中配置使用<code>art-templete</code>模板引擎</h5><ul><li><p><a href="https://aui.github.io/art-template/">art-template 官方文档</a></p></li><li><p>在 node 中，有很多第三方模板引擎都可以使用，不是只有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">art-template</span><br></pre></td></tr></table></figure><ul><li>还有 ejs，jade（pug），handlebars，nunjucks</li></ul></li></ul><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;两个一起安装</span><br><span class="line">npm i --save art-template express-art-template</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第一个参数是文件的后缀名 一般是html</span><br><span class="line">&#x2F;&#x2F;对应下方的index.html 的后缀名html</span><br><span class="line">app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;));</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#39;&#x2F;&#39;,function(req,res)&#123;</span><br><span class="line">    &#x2F;&#x2F; express默认会去views目录找index.html</span><br><span class="line">    res.render(&#39;index.html&#39;,&#123;</span><br><span class="line">           title:&#39;hello world&#39;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 第一个参数views千万不要写错</span><br><span class="line">app.set(&#39;views&#39;,目录路径);</span><br></pre></td></tr></table></figure><h5 id="在-Express-中获取表单请求数据"><a href="#在-Express-中获取表单请求数据" class="headerlink" title="在 Express 中获取表单请求数据"></a>在 Express 中获取表单请求数据</h5><h6 id="获取-get-请求数据："><a href="#获取-get-请求数据：" class="headerlink" title="获取 get 请求数据："></a>获取 get 请求数据：</h6><p>Express 内置了一个 api，可以直接通过<code>req.query</code>来获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 通过requery方法获取用户输入的数据</span><br><span class="line">&#x2F;&#x2F;req.query只能拿到get请求的数据（重点）</span><br><span class="line"> var comment &#x3D; req.query;</span><br></pre></td></tr></table></figure><h6 id="获取-post-请求数据："><a href="#获取-post-请求数据：" class="headerlink" title="获取 post 请求数据："></a>获取 post 请求数据：</h6><p>在 Express 中没有内置获取表单 post 请求体的 api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save body-parser;</span><br></pre></td></tr></table></figure><p>配置：</p><p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var express &#x3D; require(&#39;express&#39;)</span><br><span class="line">&#x2F;&#x2F; 引包</span><br><span class="line">var bodyParser &#x3D; require(&#39;body-parser&#39;)</span><br><span class="line"></span><br><span class="line">var app &#x3D; express()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 配置body-parser</span><br><span class="line">&#x2F;&#x2F; 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span><br><span class="line">&#x2F;&#x2F; 也就是说可以直接通过req.body来获取表单post请求数据</span><br><span class="line">&#x2F;&#x2F; parse application&#x2F;x-www-form-urlencoded</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; parse application&#x2F;json</span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(function (req, res) &#123;</span><br><span class="line">  res.setHeader(&#39;Content-Type&#39;, &#39;text&#x2F;plain&#39;)</span><br><span class="line">  res.write(&#39;you posted:\n&#39;)</span><br><span class="line">  &#x2F;&#x2F; 可以通过req.body来获取表单请求数据</span><br><span class="line">  res.end(JSON.stringify(req.body, null, 2))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在-Express-中配置使用express-session插件操作"><a href="#在-Express-中配置使用express-session插件操作" class="headerlink" title="在 Express 中配置使用express-session插件操作"></a>在 Express 中配置使用<code>express-session</code>插件操作</h3><blockquote><p>参考文档：<a href="https://github.com/expressjs/session">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;该插件会为req请求对象添加一个成员:req.session默认是一个对象</span><br><span class="line">&#x2F;&#x2F;这是最简单的配置方式</span><br><span class="line">&#x2F;&#x2F;Session是基于Cookie实现的</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  &#x2F;&#x2F;配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span><br><span class="line">  &#x2F;&#x2F;目的是为了增加安全性，防止客户端恶意伪造</span><br><span class="line">  secret: &#39;keyboard cat&#39;,</span><br><span class="line">  resave: false,</span><br><span class="line">  saveUninitialized: true,&#x2F;&#x2F;无论是否适用Session，都默认直接分配一把钥匙</span><br><span class="line">  cookie: &#123; secure: true &#125;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 读</span><br><span class="line">&#x2F;&#x2F;添加Session数据</span><br><span class="line">&#x2F;&#x2F;session就是一个对象</span><br><span class="line">req.session.foo &#x3D; &#39;bar&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写</span><br><span class="line">&#x2F;&#x2F;获取session数据</span><br><span class="line">req.session.foo</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删</span><br><span class="line">req.session.foo &#x3D; null;</span><br><span class="line">delete req.session.foo</span><br></pre></td></tr></table></figure><p>提示：</p><p>默认 Session 数据时内存储数据，服务器一旦重启，真正的生产环境会把 Session 进行持久化存储。</p><h3 id="利用-Express-实现-ADUS-项目"><a href="#利用-Express-实现-ADUS-项目" class="headerlink" title="利用 Express 实现 ADUS 项目"></a>利用 Express 实现 ADUS 项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p><ul><li>模块职责要单一</li></ul><p>javascript 模块化：</p><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD require.js</li><li>CMD sea.js</li></ul></li><li>es6 中增加了官方支持</li></ul><h4 id="起步-2"><a href="#起步-2" class="headerlink" title="起步"></a>起步</h4><ul><li>初始化</li><li>模板处理</li></ul><h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table><thead><tr><th>请求方法</th><th>请求路径</th><th>get 参数</th><th>post 参数</th><th>备注</th></tr></thead><tbody><tr><td>GET</td><td>/students</td><td></td><td></td><td>渲染首页</td></tr><tr><td>GET</td><td>/students/new</td><td></td><td></td><td>渲染添加学生页面</td></tr><tr><td>POST</td><td>/students/new</td><td></td><td>name,age,gender,hobbies</td><td>处理添加学生请求</td></tr><tr><td>GET</td><td>/students/edit</td><td>id</td><td></td><td>渲染编辑页面</td></tr><tr><td>POST</td><td>/students/edit</td><td></td><td>id,name,age,gender,hobbies</td><td>处理编辑请求</td></tr><tr><td>GET</td><td>/students/delete</td><td>id</td><td></td><td>处理删除请求</td></tr></tbody></table><h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * router.js路由模块</span><br><span class="line"> * 职责：</span><br><span class="line"> *      处理路由</span><br><span class="line"> *      根据不同的请求方法+请求路径设置具体的请求函数</span><br><span class="line"> * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率</span><br><span class="line"> *&#x2F;</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Express专门提供了一种更好的方式</span><br><span class="line">&#x2F;&#x2F; 专门用来提供路由的</span><br><span class="line">var express &#x3D; require(&#39;express&#39;);</span><br><span class="line">&#x2F;&#x2F; 1 创建一个路由容器</span><br><span class="line">var router &#x3D; express.Router();</span><br><span class="line">&#x2F;&#x2F; 2 把路由都挂载到路由容器中</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;students&#39;, function(req, res) &#123;</span><br><span class="line">    &#x2F;&#x2F; res.send(&#39;hello world&#39;);</span><br><span class="line">    &#x2F;&#x2F; readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span><br><span class="line">    &#x2F;&#x2F; 除了这样来转换，也可以通过data.toString（）来转换</span><br><span class="line">    fs.readFile(&#39;.&#x2F;db.json&#39;, &#39;utf8&#39;, function(err, data) &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            return res.status(500).send(&#39;Server error.&#39;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 读取到的文件数据是string类型的数据</span><br><span class="line">        &#x2F;&#x2F; console.log(data);</span><br><span class="line">        &#x2F;&#x2F; 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span><br><span class="line">        var students &#x3D; JSON.parse(data).students;</span><br><span class="line">        res.render(&#39;index.html&#39;, &#123;</span><br><span class="line">            &#x2F;&#x2F; 读取文件数据</span><br><span class="line">            students:students</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;students&#x2F;new&#39;,function(req,res)&#123;</span><br><span class="line">    res.render(&#39;new.html&#39;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;students&#x2F;edit&#39;,function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(&#39;&#x2F;students&#x2F;edit&#39;,function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;students&#x2F;delete&#39;,function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 3 把router导出</span><br><span class="line">module.exports &#x3D; router;</span><br></pre></td></tr></table></figure><p>app.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var router &#x3D; require(&#39;.&#x2F;router&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; router(app);</span><br><span class="line">&#x2F;&#x2F; 把路由容器挂载到app服务中</span><br><span class="line">&#x2F;&#x2F; 挂载路由</span><br><span class="line">app.use(router);</span><br></pre></td></tr></table></figure><h4 id="设计操作数据的-API-文件模块"><a href="#设计操作数据的-API-文件模块" class="headerlink" title="设计操作数据的 API 文件模块"></a>设计操作数据的 API 文件模块</h4><p>es6 中的 find 和 findIndex：</p><p>find 接受一个方法作为参数，方法内部返回一个条件</p><p>find 会便利所有的元素，执行你给定的带有条件返回值的函数</p><p>符合该条件的元素会作为 find 方法的返回值</p><p>如果遍历结束还没有符合该条件的元素，则返回 undefined<a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md"><img src alt="image-20200313103810731"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * student.js</span><br><span class="line"> * 数据操作文件模块</span><br><span class="line"> * 职责：操作文件中的数据，只处理数据，不关心业务</span><br><span class="line"> *&#x2F;</span><br><span class="line">var fs &#x3D; require(&#39;fs&#39;);</span><br><span class="line"> &#x2F;**</span><br><span class="line">  * 获取所有学生列表</span><br><span class="line">  * return []</span><br><span class="line">  *&#x2F;</span><br><span class="line">exports.find &#x3D; function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#x2F;**</span><br><span class="line">  * 获取添加保存学生</span><br><span class="line">  *&#x2F;</span><br><span class="line">exports.save &#x3D; function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 更新学生</span><br><span class="line"> *&#x2F;</span><br><span class="line">exports.update &#x3D; function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 删除学生</span><br><span class="line"> *&#x2F;</span><br><span class="line">exports.delete &#x3D; function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li>处理模板</li><li>配置静态开放资源</li><li>配置模板引擎</li><li>简单的路由，/studens 渲染静态页出来</li><li>路由设计</li><li>提取路由模块</li><li>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装 Student.js’</li><li>先写好 student.js 文件结构<ul><li>查询所有学生列别哦的 API</li><li>findById</li><li>save</li><li>updateById</li><li>deleteById</li></ul></li><li>实现具体功能<ul><li>通过路由收到请求</li><li>接受请求中的参数（get，post）<ul><li>req.query</li><li>req.body</li></ul></li><li>调用数据操作 API 处理数据</li><li>根据操作结果给客户端发送请求</li></ul></li><li>业务功能顺序<ul><li>列表</li><li>添加</li><li>编辑</li><li>删除</li></ul></li></ul><h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p><p>模板页：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;模板页&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;node_modules&#x2F;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&quot;&#x2F;&gt;</span><br><span class="line">    &#123;&#123; block &#39;head&#39; &#125;&#125;&#123;&#123; &#x2F;block &#125;&#125;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="line">    &#123;&#123;include &#39;.&#x2F;header.html&#39;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 留一个位置 让别的内容去填充 --&gt;</span><br><span class="line">    &#123;&#123; block  &#39;content&#39; &#125;&#125;</span><br><span class="line">        &lt;h1&gt;默认内容&lt;&#x2F;h1&gt;</span><br><span class="line">    &#123;&#123; &#x2F;block &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 通过include导入公共部分 --&gt;</span><br><span class="line">    &#123;&#123;include &#39;.&#x2F;footer.html&#39;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 公共样式 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;node_modules&#x2F;jquery&#x2F;dist&#x2F;jquery.js&quot; &gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;&#x2F;node_modules&#x2F;bootstrap&#x2F;dist&#x2F;js&#x2F;bootstrap.js&quot; &gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &#123;&#123; block &#39;script&#39; &#125;&#125;&#123;&#123; &#x2F;block &#125;&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>模板的继承：</p><p>header 页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;h1&gt;公共的头部&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>footer 页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;h1&gt;公共的底部&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>模板页的使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 继承(extend:延伸，扩展)模板也layout.html --&gt;</span><br><span class="line">&lt;!-- 把layout.html页面的内容都拿进来作为index.html页面的内容 --&gt;</span><br><span class="line">&#123;&#123;extend &#39;.&#x2F;layout.html&#39;&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 向模板页面填充新的数据 --&gt;</span><br><span class="line">&lt;!-- 填充后就会替换掉layout页面content中的数据 --&gt;</span><br><span class="line">&lt;!-- style样式方面的内容 --&gt;</span><br><span class="line">&#123;&#123; block &#39;head&#39; &#125;&#125;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&#123;&#123; &#x2F;block &#125;&#125;</span><br><span class="line">&#123;&#123; block &#39;content&#39; &#125;&#125;</span><br><span class="line">    &lt;div id&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Index页面的内容&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;&#123; &#x2F;block &#125;&#125;</span><br><span class="line">&lt;!-- js部分的内容 --&gt;</span><br><span class="line">&#123;&#123; block &#39;script&#39; &#125;&#125;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&#123;&#123; &#x2F;block &#125;&#125;</span><br></pre></td></tr></table></figure><p>最终的显示效果：</p><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md"><img src alt="image-20200316134759517"></a></p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是 key-value 对儿</li><li>但 MongDB 是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    qq:&#123;</span><br><span class="line">       user:[</span><br><span class="line">           &#123;&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载</p><ul><li>下载地址：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></li></ul></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mongoose</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p></li><li><p>最后输入<code>mongod --version</code>测试是否安装成功</p></li></ul><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mongodb 默认使用执行mongod 命令所处盼复根目录下的&#x2F;data&#x2F;db作为自己的数据存储目录</span><br><span class="line"># 所以在第一次执行该命令之前先自己手动新建一个 &#x2F;data&#x2F;db</span><br><span class="line">mongod</span><br></pre></td></tr></table></figure><p>如果想要修改默认的数据存储目录，可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath &#x3D; 数据存储目录路径</span><br></pre></td></tr></table></figure><p>停止：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在开启服务的控制台，直接Ctrl+C;</span><br><span class="line">或者直接关闭开启服务的控制台。</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md"><img src alt="image-20200314101047100"></a></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 该命令默认连接本机的 MongoDB 服务</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><p>退出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在连接状态输入 exit 退出连接</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><a href="https://github.com/smallC-L-Y/Demo/blob/notes/nodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md"><img src alt="image-20200314100821112"></a></p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><pre><code>show dbs&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 查看数据库列表(数据库中的所有数据库)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;#96;&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  db&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;- 查看当前连接的数据库</code></pre></li><li><pre><code>use 数据库名称&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 切换到指定的数据库，（如果没有会新建）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &amp;#96;&amp;#96;&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  show collections&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;- 查看当前目录下的所有数据表</code></pre></li><li><pre><code>db.表名.find()&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - 查看表中的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 在 Node 中如何操作 MongoDB 数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 使用官方的&amp;#96;MongoDB&amp;#96;包来操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; http:&amp;#x2F;&amp;#x2F;mongodb.github.io&amp;#x2F;node-mongodb-native&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 使用第三方包&amp;#96;mongoose&amp;#96;来操作 MongoDB 数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三方包：&amp;#96;mongoose&amp;#96;基于 MongoDB 官方的&amp;#96;mongodb&amp;#96;包再一次做了封装，名字叫&amp;#96;mongoose&amp;#96;，是 WordPress 项目团队开发的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; https:&amp;#x2F;&amp;#x2F;mongoosejs.com&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[![image-20200314105632745]()](https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;smallC-L-Y&amp;#x2F;Demo&amp;#x2F;blob&amp;#x2F;notes&amp;#x2F;nodeJS学习笔记.md)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[![image-20200314105717993]()](https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;smallC-L-Y&amp;#x2F;Demo&amp;#x2F;blob&amp;#x2F;notes&amp;#x2F;nodeJS学习笔记.md)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 学习指南（步骤）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;官方学习文档：https:&amp;#x2F;&amp;#x2F;mongoosejs.com&amp;#x2F;docs&amp;#x2F;index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 设计 Scheme 发布 Model (创建表)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;// 1.引包// 注意：按照后才能require使用var mongoose = require(&#39;mongoose&#39;);</code></pre></li></ul><p>// 拿到schema图表<br>var Schema = mongoose.Schema;</p><p>// 2.连接数据库<br>// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库<br>mongoose.connect(‘mongodb://localhost/test’);</p><p>// 3.设计集合结构（表结构）<br>// 用户表<br>var userSchema = new Schema({<br>    username: { //姓名<br>        type: String,<br>        require: true //添加约束，保证数据的完整性，让数据按规矩统一<br>    },<br>    password: {<br>        type: String,<br>        require: true<br>    },<br>    email: {<br>        type: String<br>    }<br>});</p><p>// 4.将文档结构发布为模型<br>// mongoose.model方法就是用来将一个架构发布为 model<br>//         第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称<br>//                     mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称<br>//                     例如 这里会变成users集合名称<br>//         第二个参数：架构<br>//     返回值：模型构造函数<br>var User = mongoose.model(‘User’, userSchema);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 添加数据（增）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>// 5.通过模型构造函数对User中的数据进行操作<br>var user = new User({<br>    username: ‘admin’,<br>    password: ‘123456’,<br>    email: ‘xiaochen@qq.com’<br>});</p><p>user.save(function(err, ret) {<br>    if (err) {<br>        console.log(‘保存失败’);<br>    } else {<br>        console.log(‘保存成功’);<br>        console.log(ret);<br>    }<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 删除（删）</span><br><span class="line"></span><br><span class="line">根据条件删除所有：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User.remove({<br>    username: ‘xiaoxiao’<br>}, function(err, ret) {<br>    if (err) {<br>        console.log(‘删除失败’);<br>    } else {<br>        console.log(‘删除成功’);<br>        console.log(ret);<br>    }<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据条件删除一个：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Model.findOneAndRemove(conditions,[options],[callback]);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据 id 删除一个：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User.findByIdAndRemove(id,[options],[callback]);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 更新（改）</span><br><span class="line"></span><br><span class="line">更新所有：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User.remove(conditions,doc,[options],[callback]);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据指定条件更新一个：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User.FindOneAndUpdate([conditions],[update],[options],[callback]);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">根据 id 更新一个：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>// 更新    根据id来修改表数据<br>User.findByIdAndUpdate(‘5e6c5264fada77438c45dfcd’, {<br>    username: ‘junjun’<br>}, function(err, ret) {<br>    if (err) {<br>        console.log(‘更新失败’);<br>    } else {<br>        console.log(‘更新成功’);<br>    }<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 查询（查）</span><br><span class="line"></span><br><span class="line">查询所有：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>// 查询所有<br>User.find(function(err,ret){<br>    if(err){<br>        console.log(‘查询失败’);<br>    }else{<br>        console.log(ret);<br>    }<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">条件查询所有：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>// 根据条件查询<br>User.find({ username:’xiaoxiao’ },function(err,ret){<br>    if(err){<br>        console.log(‘查询失败’);<br>    }else{<br>        console.log(ret);<br>    }<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">条件查询单个：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>// 按照条件查询单个，查询出来的数据是一个对象（{}）<br>// 没有条件查询使用findOne方法，查询的是表中的第一条数据<br>User.findOne({<br>    username: ‘xiaoxiao’<br>}, function(err, ret) {<br>    if (err) {<br>        console.log(‘查询失败’);<br>    } else {<br>        console.log(ret);<br>    }<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 使用 Node 操作 MySQL 数据库</span><br><span class="line"></span><br><span class="line">文档：https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;mysql</span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>npm install –save  mysql<br>// 引入mysql包<br>var mysql      = require(‘mysql’);</p><p>// 创建连接<br>var connection = mysql.createConnection({<br>  host     : ‘localhost’,    //本机<br>  user     : ‘me’,        //账号root<br>  password : ‘secret’,    //密码12345<br>  database : ‘my_db’    //数据库名<br>});</p><p>// 连接数据库    （打开冰箱门）<br>connection.connect();</p><p>//执行数据操作    （把大象放到冰箱）<br>connection.query(‘SELECT * FROM <code>users</code> ‘, function (error, results, fields) {<br>  if (error) throw error;//抛出异常阻止代码往下执行<br>  // 没有异常打印输出结果<br>  console.log(‘The solution is: ‘,results);<br>});</p><p>//关闭连接    （关闭冰箱门）<br>connection.end();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 异步编程</span><br><span class="line"></span><br><span class="line">## 回调函数</span><br><span class="line"></span><br><span class="line">不成立的情况下：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>function add(x,y){<br>    console.log(1);<br>    setTimeout(function(){<br>        console.log(2);<br>        var ret = x + y;<br>        return ret;<br>    },1000);<br>    console.log(3);<br>    //到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined<br>}</p><p>console.log(add(2,2));<br>// 结果是 1 3 undefined 4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[![image-20200313085008929]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">使用回调函数解决：</span><br><span class="line"></span><br><span class="line">回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var ret;<br>function add(x,y,callback){<br>    // callback就是回调函数<br>    // var x = 10;<br>    // var y = 20;<br>    // var callback = function(ret){console.log(ret);}<br>    console.log(1);<br>    setTimeout(function(){<br>        var ret = x + y;<br>        callback(ret);<br>    },1000);<br>    console.log(3);<br>}<br>add(10,20,function(ret){<br>    console.log(ret);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[![image-20200313084746701]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</span><br><span class="line"></span><br><span class="line">这种情况必须通过 回调函数 (异步 API 都会伴随着一个回调函数)</span><br><span class="line"></span><br><span class="line">ajax:</span><br><span class="line"></span><br><span class="line">基于原生 XMLHttpRequest 封装 get 方法：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var oReq = new XMLHttpRequest();<br>// 当请求加载成功要调用指定的函数<br>oReq.onload = function(){<br>    console.log(oReq.responseText);<br>}<br>oReq.open(“GET”, “请求路径”,true);<br>oReq.send();<br>function get(url,callback){<br>    var oReq = new XMLHttpRequest();<br>    // 当请求加载成功要调用指定的函数<br>    oReq.onload = function(){<br>        //console.log(oReq.responseText);<br>        callback(oReq.responseText);<br>    }<br>    oReq.open(“GET”, url,true);<br>    oReq.send();<br>}<br>get(‘data.json’,function(data){<br>    console.log(data);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Promise</span><br><span class="line"></span><br><span class="line">callback hell（回调地狱）:</span><br><span class="line"></span><br><span class="line">[![image-20200314143410972]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步 api 无法保证文件的执行顺序)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var fs = require(‘fs’);</p><p>fs.readFile(‘./data/a.text’,’utf8’,function(err,data){<br>    if(err){<br>        // 1 读取失败直接打印输出读取失败<br>        return console.log(‘读取失败’);<br>        // 2 抛出异常<br>        //         阻止程序的执行<br>        //         把错误信息打印到控制台<br>        throw err;<br>    }<br>    console.log(data);<br>});</p><p>fs.readFile(‘./data/b.text’,’utf8’,function(err,data){<br>    if(err){<br>        // 1 读取失败直接打印输出读取失败<br>        return console.log(‘读取失败’);<br>        // 2 抛出异常<br>        //         阻止程序的执行<br>        //         把错误信息打印到控制台<br>        throw err;<br>    }<br>    console.log(data);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">通过回调嵌套的方式来保证顺序：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var fs = require(‘fs’);</p><p>fs.readFile(‘./data/a.text’,’utf8’,function(err,data){<br>    if(err){<br>        // 1 读取失败直接打印输出读取失败<br>        return console.log(‘读取失败’);<br>        // 2 抛出异常<br>        //         阻止程序的执行<br>        //         把错误信息打印到控制台<br>        throw err;<br>    }<br>    console.log(data);<br>    fs.readFile(‘./data/b.text’,’utf8’,function(err,data){<br>        if(err){<br>            // 1 读取失败直接打印输出读取失败<br>            return console.log(‘读取失败’);<br>            // 2 抛出异常<br>            //         阻止程序的执行<br>            //         把错误信息打印到控制台<br>            throw err;<br>        }<br>        console.log(data);<br>        fs.readFile(‘./data/a.text’,’utf8’,function(err,data){<br>            if(err){<br>                // 1 读取失败直接打印输出读取失败<br>                return console.log(‘读取失败’);<br>                // 2 抛出异常<br>                //         阻止程序的执行<br>                //         把错误信息打印到控制台<br>                throw err;<br>            }<br>            console.log(data);<br>        });<br>    });<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[![image-20200314144807008]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)为了解决以上编码方式带来的问题（回调地狱嵌套），所以在 EcmaScript6 新增了一个 API:&#96;Promise&#96;。[![image-20200314150050839]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">- Promise：承诺，保证</span><br><span class="line">- Promise 本身不是异步的，但往往都是内部封装一个异步任务</span><br><span class="line"></span><br><span class="line">基本语法：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>// 在EcmaScript 6中新增了一个API Promise<br>// Promise 是一个构造函数</p><p>var fs = require(‘fs’);<br>// 1 创建Promise容器        resolve:解决   reject：失败<br>var p1 = new Promise(function(resolve, reject) {<br>    fs.readFile(‘./a.text’, ‘utf8’, function(err, data) {<br>        if (err) {<br>            // console.log(err);<br>            // 把容器的Pending状态变为rejected<br>            reject(err);<br>        } else {<br>            // console.log(data);<br>            // 把容器的Pending状态变为resolve<br>            resolve(1234);<br>        }<br>    });<br>});</p><p>// 当p1成功了，然后就（then）做指定的操作<br>// then方法接收的function就是容器中的resolve函数<br>p1<br>    .then(function(data) {<br>        console.log(data);<br>    }, function(err) {<br>        console.log(‘读取文件失败了’, err);<br>    });</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[![image-20200315100611620]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">链式循环：[![image-20200315125559136]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">封装 Promise 的&#96;readFile&#96;：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var fs = require(‘fs’);</p><p>function pReadFile(filePath) {<br>    return new Promise(function(resolve, reject) {<br>        fs.readFile(filePath, ‘utf8’, function(err, data) {<br>            if (err) {<br>                reject(err);<br>            } else {<br>                resolve(data);<br>            }<br>        });<br>    });<br>}</p><p>pReadFile(‘./a.txt’)<br>    .then(function(data) {<br>        console.log(data);<br>        return pReadFile(‘./b.txt’);<br>    })<br>    .then(function(data) {<br>        console.log(data);<br>        return pReadFile(‘./a.txt’);<br>    })<br>    .then(function(data) {<br>        console.log(data);<br>    })</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mongoose 所有的 API 都支持 Promise：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>// 查询所有<br>User.find()<br>    .then(function(data){<br>        console.log(data)<br>    })</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注册：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User.findOne({username:’admin’},function(user){<br>    if(user){<br>        console.log(‘用户已存在’)<br>    } else {<br>        new User({<br>             username:’aaa’,<br>             password:’123’,<br>             email:’fffff’<br>        }).save(function(){<br>            console.log(‘注册成功’);<br>        })<br>    }<br>})<br>User.findOne({<br>    username:’admin’<br>})<br>    .then(function(user){<br>        if(user){<br>            // 用户已经存在不能注册<br>            console.log(‘用户已存在’);<br>        }<br>        else{<br>            // 用户不存在可以注册<br>            return new User({<br>                username:’aaa’,<br>                password:’123’,<br>                email:’fffff’<br>            }).save();<br>        }<br>    })<br>    .then(funciton(ret){<br>        console.log(‘注册成功’);<br>    })</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Generator</span><br><span class="line"></span><br><span class="line">async 函数</span><br><span class="line"></span><br><span class="line"># 其他</span><br><span class="line"></span><br><span class="line">## 修改完代码自动重启</span><br><span class="line"></span><br><span class="line">我们在这里可以使用一个第三方命名行工具：&#96;nodemon&#96;来帮助我们解决频繁修改代码重启服务器的问题。</span><br><span class="line"></span><br><span class="line">&#96;nodemon&#96;是一个基于 Node.js 开发的一个第三方命令行工具，我们使用的时候需要独立安装：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#在任意目录执行该命令都可以<br>#也就是说，所有需要 –global安装的包都可以在任意目录执行<br>npm install –global nodemon<br>npm install -g nodemon</p><p>#如果安装不成功的话，可以使用cnpm安装<br>cnpm install -g nodemon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">安装完毕之后使用：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>node app.js</p><p>#使用nodemon<br>nodemon app.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">只要是通过&#96;nodemon&#96;启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</span><br><span class="line"></span><br><span class="line">## 封装异步 API</span><br><span class="line"></span><br><span class="line">回调函数：获取异步操作的结果</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>function fn(callback){<br>    // var callback = funtion(data){ console.log(data); }<br>    setTimeout(function(){<br>        var data = ‘hello’;<br>        callback(data);<br>    },1000);<br>}<br>// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取<br>fn(function(data){<br>    console.log(data);<br>})</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 数组的遍历方法，都是对函数作为一种参数</span><br><span class="line"></span><br><span class="line">[![image-20200314094620191]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">## EcmaScript 6</span><br><span class="line"></span><br><span class="line">&gt; 参考文档：https:&#x2F;&#x2F;es6.ruanyifeng.com&#x2F;</span><br><span class="line"></span><br><span class="line"># 项目案例</span><br><span class="line"></span><br><span class="line">## 目录结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.<br>app.js    项目的入口文件<br>controllers<br>models    存储使用mongoose设计的数据模型<br>node_modules    第三方包<br>package.json    包描述文件<br>package-lock.json    第三方包版本锁定文件（npm5之后才有）<br>public    公共静态资源<br>routes<br>views    存储视图目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 模板页</span><br><span class="line"></span><br><span class="line">- 子模板</span><br><span class="line">- 模板继承</span><br><span class="line"></span><br><span class="line">## 路由设计</span><br><span class="line"></span><br><span class="line">| 路由            | 方法 | get 参数 | post 参数               | 是否需要登录 | 备注         |</span><br><span class="line">| --------------- | ---- | -------- | ----------------------- | ------------ | ------------ |</span><br><span class="line">| &#x2F;               | get  |          |                         |              | 渲染首页     |</span><br><span class="line">| &#x2F;register(登录) | get  |          |                         |              | 渲染注册页面 |</span><br><span class="line">| &#x2F;register       | post |          | email,nickname,password |              | 处理注册请求 |</span><br><span class="line">| &#x2F;login          | get  |          |                         |              | 渲染登陆界面 |</span><br><span class="line">| &#x2F;login          | post |          | email,password          |              | 处理登录请求 |</span><br><span class="line">| &#x2F;loginout       | get  |          |                         |              | 处理退出请求 |</span><br><span class="line">|                 |      |          |                         |              |              |</span><br><span class="line"></span><br><span class="line">## 模型设计</span><br><span class="line"></span><br><span class="line">## 功能实现</span><br><span class="line"></span><br><span class="line">## 步骤</span><br><span class="line"></span><br><span class="line">- 创建目录结构</span><br><span class="line">- 整合静态也-模板页</span><br><span class="line">  - include</span><br><span class="line">  - block</span><br><span class="line">  - extend</span><br><span class="line">- 设计用户登陆，退出，注册的路由</span><br><span class="line">- 用户注册</span><br><span class="line">  - 先处理客户端页面的内容（表单控件的 name，收集表单数据，发起请求）</span><br><span class="line">  - 服务端</span><br><span class="line">    - 获取从客户端收到的数据</span><br><span class="line">    - 操作数据库</span><br><span class="line">      - 如果有错，发送 500 告诉客户端服务器错了‘</span><br><span class="line">      - 其他的根据业务发送不同的响应数据</span><br><span class="line">- 登录</span><br><span class="line">- 退出</span><br><span class="line"></span><br><span class="line"># Express 中间件</span><br><span class="line"></span><br><span class="line">## 中间件的概念</span><br><span class="line"></span><br><span class="line">&gt; 参考文档：http:&#x2F;&#x2F;expressjs.com&#x2F;en&#x2F;guide&#x2F;using-middleware.html</span><br><span class="line"></span><br><span class="line">[![image-20200316202757617]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</span><br><span class="line"></span><br><span class="line">说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</span><br><span class="line"></span><br><span class="line">把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var http = require(‘http’);<br>var url = require(‘url’);</p><p>var cookie = require(‘./expressPtoject/cookie’);<br>var query = require(‘./expressPtoject/query’);<br>var postBody = require(‘./expressPtoject/post-body’);</p><p>var server = http.createServer(function(){<br>    // 解析请求地址中的get参数<br>    // var obj = url.parse(req.url,true);<br>    // req.query = obj.query;<br>    query(req,res);    //中间件</p><pre><code>// 解析请求地址中的post参数req.body = &#123;    foo:&#39;bar&#39;&#125;</code></pre><p>});</p><p>if(req.url === ‘xxx’){<br>    // 处理请求<br>    …<br>}</p><p>server.listen(3000,function(){<br>    console.log(‘3000 runing…’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var express = require(‘express’);<br>var app = express();<br>app.get(‘/abc’,function(req,res,next){<br>    // 同一个请求的req和res是一样的，<br>    // 可以前面存储下面调用<br>    console.log(‘/abc’);<br>    // req.foo = ‘bar’;<br>    req.body = {<br>        name:’xiaoxiao’,<br>        age:18<br>    }<br>    next();<br>});<br>app.get(‘/abc’,function(req,res,next){<br>    // console.log(req.foo);<br>    console.log(req.body);<br>    console.log(‘/abc’);<br>});<br>app.listen(3000, function() {<br>    console.log(‘app is running at port 3000.’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[![image-20200317110520098]()](https:&#x2F;&#x2F;github.com&#x2F;smallC-L-Y&#x2F;Demo&#x2F;blob&#x2F;notes&#x2F;nodeJS学习笔记.md)</span><br><span class="line"></span><br><span class="line">## 中间件的分类:</span><br><span class="line"></span><br><span class="line">### 应用程序级别的中间件</span><br><span class="line"></span><br><span class="line">万能匹配（不关心任何请求路径和请求方法的中间件）：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.use(function(req,res,next){<br>    console.log(‘Time’,Date.now());<br>    next();<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">关心请求路径和请求方法的中间件：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.use(‘/a’,function(req,res,next){<br>    console.log(‘Time’,Date.now());<br>    next();<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 路由级别的中间件</span><br><span class="line"></span><br><span class="line">严格匹配请求路径和请求方法的中间件</span><br><span class="line"></span><br><span class="line">get:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.get(‘/‘,function(req,res){<br>    res.send(‘get’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">post：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.post(‘/a’,function(req,res){<br>    res.send(‘post’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">put:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.put(‘/user’,function(req,res){<br>    res.send(‘put’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">delete:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.delete(‘/delete’,function(req,res){<br>    res.send(‘delete’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 总</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>var express = require(‘express’);<br>var app = express();</p><p>// 中间件：处理请求，本质就是个函数<br>// 在express中，对中间件有几种分类</p><p>// 1 不关心任何请求路径和请求方法的中间件<br>// 也就是说任何请求都会进入这个中间件<br>// 中间件本身是一个方法，该方法接收三个参数<br>// Request 请求对象<br>// Response 响应对象<br>// next 下一个中间件<br>// // 全局匹配中间件<br>// app.use(function(req, res, next) {<br>//     console.log(‘1’);<br>//     // 当一个请求进入中间件后<br>//     // 如果需要请求另外一个方法则需要使用next（）方法<br>//     next();<br>//     // next是一个方法，用来调用下一个中间件<br>//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）<br>// });<br>// app.use(function(req, res, next) {<br>//     console.log(‘2’);<br>// });</p><p>// // 2 关心请求路径的中间件<br>// // 以/xxx开头的中间件<br>// app.use(‘/a’,function(req, res, next) {<br>//     console.log(req.url);<br>// });</p><p>// 3 严格匹配请求方法和请求路径的中间件<br>app.get(‘/‘,function(){<br>    console.log(‘/‘);<br>});<br>app.post(‘/a’,function(){<br>    console.log(‘/a’);<br>});</p><p>app.listen(3000, function() {<br>    console.log(‘app is running at port 3000.’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 错误处理中间件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.use(function(err,req,res,next){<br>    console.error(err,stack);<br>    res.status(500).send(‘Something broke’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">配置使用 404 中间件：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.use(function(req,res){<br>    res.render(‘404.html’);<br>});</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">配置全局错误处理中间件:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.get(‘/a’, function(req, res, next) {<br>    fs.readFile(‘.a/bc’, funtion() {<br>        if (err) {<br>            // 当调用next()传参后，则直接进入到全局错误处理中间件方法中<br>            // 当发生全局错误的时候，我们可以调用next传递错误对象<br>            // 然后被全局错误处理中间件匹配到并进行处理<br>            next(err);<br>        }<br>    })<br>});<br>//全局错误处理中间件<br>app.use(function(err,req,res,next){<br>    res.status(500).json({<br>        err_code:500,<br>        message:err.message<br>    });<br>});</p><pre><code>## 内置中间件- express.static(提供静态文件)  - http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express## 第三方中间件&gt; 参考文档：http://expressjs.com/en/resources/middleware.html- body-parser- compression- cookie-parser- mogran- response-time- server-static- session</code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node跟学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晚霞</title>
      <link href="/2020/11/09/%E9%9A%8F%E5%BF%83%E8%AE%B0/SunsetGlow/"/>
      <url>/2020/11/09/%E9%9A%8F%E5%BF%83%E8%AE%B0/SunsetGlow/</url>
      
        <content type="html"><![CDATA[<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/%20(2).jpg"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/(4).jpg"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/(5).jpg"><h3 id="宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。"><a href="#宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。" class="headerlink" title="宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。"></a>宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。</h3>]]></content>
      
      
      <categories>
          
          <category> 随心记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 晚霞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晚霞</title>
      <link href="/2020/11/09/%E9%9A%8F%E5%BF%83%E8%AE%B0/%E6%99%9A%E9%9C%9E/"/>
      <url>/2020/11/09/%E9%9A%8F%E5%BF%83%E8%AE%B0/%E6%99%9A%E9%9C%9E/</url>
      
        <content type="html"><![CDATA[<img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/%20(2).jpg"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/(4).jpg"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/(5).jpg"><h3 id="宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。"><a href="#宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。" class="headerlink" title="宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。"></a>宁静的天空，宁静的云，宁静的心，都说黄昏无限好，只是近黄昏，没有黄昏的映衬，晚霞有怎会如此美丽。</h3>]]></content>
      
      
      <categories>
          
          <category> 随心记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 晚霞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实践心得</title>
      <link href="/2020/11/09/%E6%96%87%E7%AB%A0/summary/"/>
      <url>/2020/11/09/%E6%96%87%E7%AB%A0/summary/</url>
      
        <content type="html"><![CDATA[<style>h1{  text-align: center;}p{  text-indent:2em;}</style><h1> 一份耕耘，一份收获</h1><p>“实践是检验真理的唯一标准”。我一直都坚信的一句话，从实践中能够收获更深更广的知识，能够明显感觉到自己能力不足的一面和自己擅长的方面，更进一步的是如何灵活运用知识解决问题，生活中遇到的问题远比课堂学到的复杂多变，从这次实践中我就学会了如何和不同性格的人沟通交流，怎样利用每个人的长处来实现小组效率的最大化，通过合理安排时间，合理规划任务进程，按时按质完成每一步计划，最终完成整个社会实践。</p><p>在小组中我最为小组的组长，第一步便是通过小组表决确定实践的主题，罗列出任务大纲。其次便是考虑每一个组员的性格特点和擅长的技能，来合理安排任务，但在安排任务中也遇到问题，工作量的大小，工作的难度等，需要我来说服和调节。</p><p>从和他们沟通的过程中我明显感觉到每个人都有自己不同的思维方式，有自己的观点和立场，我认为合理但不一定是最优的方案，毕竟在判断是总会受到主观的影响，无法做到客观看待问题。</p><p>其一，我学会了讨论的重要性，通过探讨可以更为客观的看到事物的利与弊，存在的风险和预测最终的结果，从而选择一个合理的解决方案。其二，我从实践过程中发现了每个人多少都有一定的拖延症。能够正真做到按时按质完成工作的成员是极少的。所以再设计计划方案一定要留有一定的缓冲时间，不然到最后可能会出现时间不够的现象。再者计划赶不上变化，往往会遇到意想不到的突发状况打乱计划。在三坊七巷采访中原定计划于中午1点福州市汇合，结果出校门时被保安卡住，原因是没有在钉钉上申请外出假条，最后2点才汇合。后来的采访过程中也是遭到多次拒绝，延长了实践实践，最后勉强赶上了回学校的末班车。出现这次意外主要是没有事先了解一下学校的出行制度和低估了采访的难度，预留的时间过小。其三，我学会了如何运用自己的专业去解决一些实际问题。理论要与实际相结合，作为软件工程的专业，这种机会是很少的，课堂多是一些理论化的知识，缺少实战的项目。趁着这次实践，我运用一些前端的知识做出了一个展示的页面。原计划是使用ppt来展示，但我在这方面实在是没有天赋，完全做不出自己想要的效果，我开始思考如何来展示我们的成果，最终想到了为何不利用自己擅长的前端知识来制作ppt，通过国庆期间在网上的学习，最终借用了一些框架和库完成了自己的任务，整体展示效果不错。最后一点就是这次实践让我发现我比较擅长做规划，喜欢学习一些比较新奇的技术，锻炼了我的沟通能力和解决问题的能力。</p><p>实践不仅是发现了自己的优势，同时也更明显的突出了自己的劣势。在沟通中容易控制不住自己的情绪，对于别人的观点没有认真的斟酌，存在一种盲目自信的心里，专业技能能力太弱，知识的储备远远不够，导致无法做出满意的作品，自律方面有待提高，会出现拖拉的现象，这是我需要进一步改善的方面，也是我可以更近一步提升自己的方面。</p><p>一份耕耘，一份收获，承担的越多，学到的越多。从这次的社会实践，我真正做到了从实践中学习，在学习中实践。</p>]]></content>
      
      
      <categories>
          
          <category> 政治论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实践心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识点总会 HTML CSS JS</title>
      <link href="/2020/10/28/JavaScript/js/"/>
      <url>/2020/10/28/JavaScript/js/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点总会-HTML-CSS-JS"><a href="#知识点总会-HTML-CSS-JS" class="headerlink" title="知识点总会 HTML CSS JS"></a>知识点总会 HTML CSS JS</h1><h2 id="HTMl"><a href="#HTMl" class="headerlink" title="HTMl"></a>HTMl</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/html.png"></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201109180237173.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201109180711241.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="磕磕绊绊一路走来，从未放弃，终于学完了前端的基础-o-￣︶￣-o"><a href="#磕磕绊绊一路走来，从未放弃，终于学完了前端的基础-o-￣︶￣-o" class="headerlink" title="磕磕绊绊一路走来，从未放弃，终于学完了前端的基础 o(￣︶￣)o"></a><strong>磕磕绊绊一路走来，从未放弃，终于学完了前端的基础 o(<em>￣︶￣</em>)o</strong></h2>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS/js面试题</title>
      <link href="/2020/10/08/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/html%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/10/08/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE/html%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<center><h1> 前端面试题 ——html/css/js持续更新</h1></center><h2 id="HTML-篇"><a href="#HTML-篇" class="headerlink" title="HTML 篇"></a>HTML 篇</h2><h3 id="Doctype-的作用？标准模式和兼容模式的区别？"><a href="#Doctype-的作用？标准模式和兼容模式的区别？" class="headerlink" title="Doctype 的作用？标准模式和兼容模式的区别？"></a>Doctype 的作用？标准模式和兼容模式的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.目的是告诉浏览器的解析文件用什么文档标准来解析此文件。</span><br><span class="line">2.标准模式下：排版和JS运作模式都是该浏览器的最高标准运行。</span><br><span class="line">3.兼容模式下：页面以一种宽松的向后兼容的方式向后显示，模拟老式浏览器的行为来防止站点无法工作。</span><br></pre></td></tr></table></figure><ul><li>Doctype 必须位于 HTML 的顶部第一行，是 document.type 的缩写。用于告诉浏览器文档的类型。</li><li>Doctype 不存在或者格式不正确会导致文档以兼容的模式呈现。</li></ul><h3 id="为什么-HTML5-只要写-？"><a href="#为什么-HTML5-只要写-？" class="headerlink" title="为什么 HTML5 只要写 ？"></a>为什么 HTML5 只要写<DOCTYPE html> ？</DOCTYPE></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTMLl5不基于SGML，不需要对DTD进行引用，但是需要doctype 来规范浏览器的行为。HTML4.01 基于SGML 所以要引用DTD来告诉浏览器文档的类型。</span><br></pre></td></tr></table></figure><h3 id="Doctype-文档的类型有那些？"><a href="#Doctype-文档的类型有那些？" class="headerlink" title="Doctype 文档的类型有那些？"></a>Doctype 文档的类型有那些？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">严格版本（strict ）用于呈现最新标准的网页</span><br><span class="line">过度版本（transitional） 呈现传统的网页模式</span><br><span class="line">基于框架的HTML版本 呈现传统的网页模式</span><br></pre></td></tr></table></figure><h3 id="HTML-和-XHTML-的区别"><a href="#HTML-和-XHTML-的区别" class="headerlink" title="HTML 和 XHTML 的区别"></a>HTML 和 XHTML 的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.XHTML 必须有结束标签</span><br><span class="line">2.所有标签的元素和属性名都要小写 必须加引号 不能简写</span><br><span class="line">3.标签的嵌套都要一一对应</span><br><span class="line">4.图片必须要有说明文字</span><br><span class="line">5.ID 代替name 属性</span><br><span class="line">6.必须有根元素</span><br></pre></td></tr></table></figure><h3 id="行内元素、块级元素、空元素-单标签-有哪些？"><a href="#行内元素、块级元素、空元素-单标签-有哪些？" class="headerlink" title="行内元素、块级元素、空元素(单标签)有哪些？"></a>行内元素、块级元素、空元素(单标签)有哪些？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.行内元素：span a b img input select strong  label ......</span><br><span class="line">2.块级元素：p h1-&gt;h6 li ul .....</span><br><span class="line">3.单标签： br br img input link meta ......</span><br></pre></td></tr></table></figure><ul><li>css 规定每一个元素都会有一个 display 属性，用于确定该元素的类型，“display:block”块级元素 “display:inline” 行内元素。</li><li>块级元素：每个块级元素独占一行 宽高内外边距都可控 宽度缺省时 占父级的 100%</li><li>行内元素：和其他元素都在一行上 宽高是文字或图片撑开的高度 无法改变<br>设置宽度无效<br>高度通过 line-height<br>margin 值只有左右有效<br>padding 只有左右有效 元素范围扩大但对周围的元素无效。</li><li>display：block 元素变成块级元素，前后都有换行符</li><li>display:inline 元素变成内联元素</li><li>display:inline-block 元素变成行内块元素 可以共享在同一行但有空隙</li></ul><h3 id="页面在导入样式时-link-和-import-的区别？"><a href="#页面在导入样式时-link-和-import-的区别？" class="headerlink" title="页面在导入样式时 link 和@import 的区别？"></a>页面在导入样式时 link 和@import 的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. link 是 XHTML 标签除了加载 CSS 外还能定义 RSS rel 链接属性 无兼容性问题 页面加载时同时被加载</span><br><span class="line">2. @import 只能用于加载 CSS IE5 以上兼容 页面加载完后才会被加载</span><br></pre></td></tr></table></figure><h3 id="img-标签中的-title-和-alt-的区别？"><a href="#img-标签中的-title-和-alt-的区别？" class="headerlink" title="img 标签中的 title 和 alt 的区别？"></a>img 标签中的 title 和 alt 的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 鼠标移入时的用户提示词</span><br><span class="line">alt: 在图片不显示时的代替文本</span><br><span class="line">在IE中alt具有title的作用</span><br></pre></td></tr></table></figure><h3 id="label-标签的作用？"><a href="#label-标签的作用？" class="headerlink" title="label 标签的作用？"></a>label 标签的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义表单控制间的关系，当用户选项改标签时，浏览器会自动将焦点转到和label绑定的相关表单上。</span><br></pre></td></tr></table></figure><h3 id="src-和-href-的区别？"><a href="#src-和-href-的区别？" class="headerlink" title="src 和 href 的区别？"></a>src 和 href 的区别？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src 是引入资源</span><br><span class="line">href 是哦用于跳转 url</span><br></pre></td></tr></table></figure><h3 id="前端有那三层构成？分别是什么？"><a href="#前端有那三层构成？分别是什么？" class="headerlink" title="前端有那三层构成？分别是什么？"></a>前端有那三层构成？分别是什么？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结构层：html dom结构</span><br><span class="line">表示层：css渲染</span><br><span class="line">行为层：js 操作</span><br></pre></td></tr></table></figure><h3 id="meta-viewport-的作用？"><a href="#meta-viewport-的作用？" class="headerlink" title="meta viewport 的作用？"></a>meta viewport 的作用？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, maximum-scale-1, minimum-scale&#x3D;1&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>with=device-width 将布局视窗（layout viewport）的宽度设置为设备屏幕分辨率的宽度 initial</li><li>scale=1 页面初始缩放比例为屏幕分辨率的宽度 maximum-scale=1 指定用户能够放大的最大比例</li><li>minimum-scale=1 指定用户能够缩小的最大比例</li></ul><h2 id="CSS-篇"><a href="#CSS-篇" class="headerlink" title="CSS 篇"></a>CSS 篇</h2><h3 id="css-水平、垂直居中的写法，请至少写出-4-种？"><a href="#css-水平、垂直居中的写法，请至少写出-4-种？" class="headerlink" title="css 水平、垂直居中的写法，请至少写出 4 种？"></a>css 水平、垂直居中的写法，请至少写出 4 种？</h3><blockquote><p>水平居中</p></blockquote><ul><li>行内元素<ul><li>text-align: center;</li></ul></li><li>块级元素<ul><li>margin : 0 auto;</li><li>position：absolute; left: 50%; transform:translateX(-50%);</li><li>display: flex; justify-content:center;</li></ul></li></ul><blockquote><p>垂直居中</p></blockquote><ul><li>行内元素<ul><li>line-height: height;</li></ul></li><li>块级元素<ul><li>position：absolute; top:50%; transform: translateY(-50%);</li><li>display:flex; aline-items:center;</li><li>display: table;display:table-cell; vertical-align: middle;</li></ul></li></ul><h3 id="rem-em-vw-vh-px-的含义"><a href="#rem-em-vw-vh-px-的含义" class="headerlink" title="rem em vw/vh % px 的含义"></a>rem em vw/vh % px 的含义</h3><ul><li>rem<ul><li>以 HTML 最为根元素为单位 设 80px 1rem == 80px</li></ul></li><li>em<ul><li>字体大小单位相对于父元素的大小</li><li>padding/margin/height/width 以 em 为单位代表 以 font-size 为 1em 单位</li></ul></li><li>vw/vh<ul><li>整个窗口的大小为 100vw/100vh</li></ul></li><li>%<ul><li>以父级的宽高为 100%，父级一定要有明确的长度</li></ul></li><li>px<ul><li>像素单位 1920/1024 宽 1920 像素 高 1024 高度</li></ul></li></ul><h3 id="文字的两端对齐"><a href="#文字的两端对齐" class="headerlink" title="文字的两端对齐"></a>文字的两端对齐</h3><ul><li>确定的宽高</li><li>text-align: justify;text-align-last: justify;</li></ul><h3 id="‘1’-‘2’-‘3’-map-parseInt-的结果是什么？"><a href="#‘1’-‘2’-‘3’-map-parseInt-的结果是什么？" class="headerlink" title="[‘1’, ‘2’, ‘3’].map(parseInt)的结果是什么？"></a>[‘1’, ‘2’, ‘3’].map(parseInt)的结果是什么？</h3><ul><li>结果：1 NaN NaN</li><li>map(function(item,index){return parseInt(item,index)})</li><li>parseInt(string, radix)</li><li>如果 radix 在 2-36 之外会返回 NaN。 如果该参数为 0，则将以 10 为基础来解析 string。</li></ul><h2 id="JavaScript-篇"><a href="#JavaScript-篇" class="headerlink" title="JavaScript 篇"></a>JavaScript 篇</h2><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ol><li>利用 set<ul><li>[…new Set([1,2,1,2,3])]</li></ul></li><li>利用 Array.from<ul><li>Array.from.call(new Set([1,2,1,2,3]))</li></ul></li><li>indexOf/include</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function unique (arr)&#123;</span><br><span class="line">let temp &#x3D; [];a</span><br><span class="line">arr.forEach(ele-&gt;&#123;</span><br><span class="line"> if(arr.indexOf(ele)&#x3D;&#x3D;-1)&#123;</span><br><span class="line">   temp.push(ele)</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;!-- if(arr.includes(ele)!&#x3D; true)&#123;</span><br><span class="line">   temp.push(ele)</span><br><span class="line"> &#125; --&gt;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><ol><li>闭包的实质是因为函数嵌套而形成的作用域链</li><li>比如说：函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包</li></ol><blockquote></blockquote><p>用途：使用闭包主要是为了设计私有的方法和变量<br>优点：可以避免变量被全局变量污染<br>缺点：函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包<br>解决方法：在退出函数之前，将不使用的局部变量全部删除</p>]]></content>
      
      
      <categories>
          
          <category> 前端面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/css/js面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命运共同体下的中国行动，大国担当</title>
      <link href="/2020/10/01/%E6%96%87%E7%AB%A0/%E5%A4%A7%E5%9B%BD%E6%8B%85%E5%BD%93/"/>
      <url>/2020/10/01/%E6%96%87%E7%AB%A0/%E5%A4%A7%E5%9B%BD%E6%8B%85%E5%BD%93/</url>
      
        <content type="html"><![CDATA[<center><h1>命运共同体下的中国行动，大国担当</h1></center><p>&emsp;&emsp;人类只有一个地球，它是我们唯一的家园，伴随着科学技术的不断进步，地球逐渐变成了“地球村”，这预示着每个国家都要面临世界经济的复杂形势；面对政治、文化等多极化；面对粮食安全、资源短缺、环境污染、疾病流行等复杂而又现实的问题，没有任何国家能够独善其身，作为大国的中国我们承担起了自己应尽的责任，早在2012年党的十八大习近平主席就提出了“倡导人类命运共同体意识”，拿出了中国方案，不可谓不是高瞻远瞩的发展目光。</p><p>&emsp;&emsp;诚然，我们对此一直坚持着。党的十八大报告中把“坚持推动构建人类命运共同体”作为新时代的坚持和发展中国特色主义社会的基本方略之一。世界潮流，浩浩荡荡，顺之则昌，逆之则亡。推动构建人类命运共同体是对世界大势和人类社会发展趋势的准确掌握和科学判断，是为促进世界和平与共同发展指明了方向，是为全球治理体系变革提供了思想引领的行动方案，是中西方文化理念和价值追求的最大公约数。积极倡导构建人类命运共同体是中国追求互利共赢、和平发展，构建全人类共同发展的方案，这是中国的方案更是顺应历史潮流的发展战略。</p><p>&emsp;&emsp;正如马克思所说“一步实际行动，比一打纲领更重要。”提出合理的方案固然重要，落实于行动才具有真正的意义。</p><p>&emsp;&emsp;面对突如其来的“新冠”灾难，中国政府果断“封城”、“封村”、“封路”的行动为全球抗击疫情谋取了最大的缓冲时间，后来这一行为被世界卫生组织总干事谭德塞高度评价称“我一生从未见过这样的动员”。我们在疫情期间做出的贡献有目共睹，中国已经援助了200多个国家4个国际组织，派遣多支医疗团队协助周边国建抗击疫情。截止至2020年5月31日，中国出口口罩706亿、防护服3.4亿、护目镜1.15亿，检测试剂2.25亿……这不仅是对构建人类命运共同体的实践，更是彰显出大国的担当。唇亡齿寒，面对灾难，我们更应携手对抗。</p><p>&emsp;&emsp;中国对构建人类命运共同体的行动和担当远远不止于此，抗击疫情不过是众多行动中的一个缩影。</p><p>&emsp;&emsp;政治方面，在亚洲方向，习近平主席提出要“让命运共同体意识在周边国家落地生根”。在非洲方向提出“中国和非洲历来是休戚与共的命运共同体，是合作共赢的利益共同体”。在拉美方向提出“构建携手共进命运共同体，创建中拉关系美好未来”。经济方面，中国提出的“一带一路”带动了周边国家的经济发展，真正实现了互利共赢的双赢局面，亚投行的建设让“一带一路”始产生全球效应。在文化方面，中国积极发展旅游业，邀请国外的知名人士来中国演讲教学，同时派遣留学生到世界各地进行深层次的交流与学习。每年的春节联欢晚会上总能看见国际友人的身影，如蛇年春晚世界著名作曲家、演奏家雅尼登上央视春晚舞台弹奏钢琴，与古筝演奏家常静共同演奏了一曲《琴筝和鸣》，两者搭配天衣无缝。国际乐坛天后席琳·迪翁用中文和宋祖英合唱的《茉莉花》引起极大反响。</p><p></p><p>&emsp;&emsp;构建人类命运共同体是我们不懈追求的目标，中国的行动，中国的担当也是全世界人民有目共睹的。“单丝不成线，独木不成林”。构建人类命运共同体是需要世界各国协同合作，共同努力才能完成的伟大事业。</p>]]></content>
      
      
      <categories>
          
          <category> 政治论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goodChina </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mouse</title>
      <link href="/2020/09/19/%E6%95%88%E6%9E%9C%E9%9B%86/Mouse/"/>
      <url>/2020/09/19/%E6%95%88%E6%9E%9C%E9%9B%86/Mouse/</url>
      
        <content type="html"><![CDATA[<h3 id="鼠标（社会主义核心价值观）"><a href="#鼠标（社会主义核心价值观）" class="headerlink" title="鼠标（社会主义核心价值观）"></a>鼠标（社会主义核心价值观）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/Mouse-Hart.png" alt="效果图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      * &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line">      body &#123;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        height: 100vh;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;common.cnblogs.com&#x2F;scripts&#x2F;jquery-2.2.0.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      $(document).ready(function ($) &#123;</span><br><span class="line">        let a_index &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        $(&quot;body&quot;).click(function (e) &#123;</span><br><span class="line">          function randomColor() &#123; &#x2F;&#x2F;随机颜色函数</span><br><span class="line">            return (</span><br><span class="line">              &quot;rgb(&quot; +</span><br><span class="line">              ~~(Math.random() * 255) +</span><br><span class="line">              &quot;,&quot; +</span><br><span class="line">              ~~(Math.random() * 255) +</span><br><span class="line">              &quot;,&quot; +</span><br><span class="line">              ~~(Math.random() * 255) +</span><br><span class="line">              &quot;)&quot;</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">          let arr &#x3D; [ &#x2F;&#x2F;显示的内容</span><br><span class="line">            &quot;❤富强❤&quot;,</span><br><span class="line">            &quot;❤民主❤&quot;,</span><br><span class="line">            &quot;❤文明❤&quot;,</span><br><span class="line">            &quot;❤和谐❤&quot;,</span><br><span class="line">            &quot;❤自由❤&quot;,</span><br><span class="line">            &quot;❤平等❤&quot;,</span><br><span class="line">            &quot;❤公正❤&quot;,</span><br><span class="line">            &quot;❤法治❤&quot;,</span><br><span class="line">            &quot;❤爱国❤&quot;,</span><br><span class="line">            &quot;❤敬业❤&quot;,</span><br><span class="line">            &quot;❤诚信❤&quot;,</span><br><span class="line">            &quot;❤友善❤&quot;,</span><br><span class="line">          ];</span><br><span class="line">          $i &#x3D; $(&quot;&lt;span&gt;&lt;&#x2F;span&gt;&quot;).text(arr[a_index]);&#x2F;&#x2F;创建span标签并添加数组内容</span><br><span class="line">          a_index &#x3D; (a_index + 1) % arr.length;&#x2F;&#x2F;每次点击数组下标加1 （保证不会重复）</span><br><span class="line">          let x &#x3D; e.pageX,  &#x2F;&#x2F;获取 鼠标的位置</span><br><span class="line">            y &#x3D; e.pageY;</span><br><span class="line">          $i.css(&#123;   &#x2F;&#x2F;span的 样式</span><br><span class="line">            &quot;z-index&quot;: 9999,</span><br><span class="line">            top: y - 20, &#x2F;&#x2F;让文字与鼠标有一定的距离</span><br><span class="line">            left: x,</span><br><span class="line">            position: &quot;absolute&quot;,</span><br><span class="line">            &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">            color: randomColor(),</span><br><span class="line">          &#125;);</span><br><span class="line">          $(&quot;body&quot;).append($i); &#x2F;&#x2F;（必须）将span标签添加进body中</span><br><span class="line">          $i.animate( &#x2F;&#x2F; 设置动画效果</span><br><span class="line">            &#123;</span><br><span class="line">              top: y - 200,</span><br><span class="line">              opacity: 0,</span><br><span class="line">            &#125;,</span><br><span class="line">            1500,&#x2F;&#x2F;动画执行时间</span><br><span class="line">            function () &#123;</span><br><span class="line">              $i.remove();&#x2F;&#x2F;回调函数 删除执行完的span 标签</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><ol><li>可以自己定义颜色<ul><li>将源代码的 color： randomColor(),改为 color: b[b_index] ,</li><li>如下所示</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$i.css(&#123;</span><br><span class="line">                 &quot;z-index&quot;: 9999,</span><br><span class="line">                 top: y - 20, &#x2F;&#x2F;让文字与鼠标有一定的距离</span><br><span class="line">                 left: x,</span><br><span class="line">                 position: &quot;absolute&quot;,</span><br><span class="line">                 &quot;font-weight&quot;: &quot;bold&quot;,</span><br><span class="line">                 color:  b[b_index] ,</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var b &#x3D; [</span><br><span class="line">               &quot;#FFF68F&quot;, &quot;#FFBBFF&quot;, &quot;#FF0000&quot;, &quot;#FF00FF&quot;, &quot;#F08080&quot;,</span><br><span class="line">               &quot;#008000&quot;, &quot;#7FFFAA&quot;, &quot;#0000CD&quot;, &quot;#0000FF&quot;, &quot;#080808&quot;</span><br><span class="line">           ];</span><br><span class="line">           var b_index &#x3D; Math.floor((Math.random() * b.length));</span><br><span class="line">           color： b[b_index]</span><br></pre></td></tr></table></figure><ol start="2"><li>源码中是按照数组中元素的先后顺序出现，可以改为随机出现数组中的文字<ul><li>将源码 let arr = [<br>“❤ 富强 ❤”,<br>“❤ 民主 ❤”,<br>“❤ 文明 ❤”,<br>“❤ 和谐 ❤”,<br>“❤ 自由 ❤”,<br>“❤ 平等 ❤”,<br>“❤ 公正 ❤”,<br>“❤ 法治 ❤”,<br>“❤ 爱国 ❤”,<br>“❤ 敬业 ❤”,<br>“❤ 诚信 ❤”,<br>“❤ 友善 ❤”,<br>]; 替换</li><li>更改如下</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  var a &#x3D; new Array(&quot;≦╵≦&quot;, &quot;*^_^* &quot;, &quot;^︵^&quot;, &quot;ミ灬ξ№∑⌒ξζω＊&quot;, &quot;♥♠♣&quot;, &quot;♦♧♤&quot;, &quot;卐&quot;, &quot;囍&quot;, &quot;$﹠&amp;﹪%&quot;, &quot;☯✡㍿&quot;, &quot;▁▂▃▄▅▆▇▉▊▋&quot;, &quot;︻▅▅▆▆▇◤&quot;</span><br><span class="line">, &quot;╀╁╂╃╄&quot;, &quot;ℰℯℱℊℋℎℐℒ&quot;, &quot;╢╣╤╥╦╧╨╩╪╫╬&quot;, &quot;すずせぜそぞただ&quot;, &quot;ルレロヮワヵヶ&quot;, &quot;ヰヱヲンヴ&quot;, &quot;ゼソゾタダチヂ&quot;, &quot; Й К Л М &quot;, &quot;━╋▇▇▇▇◤&quot;</span><br><span class="line">, &quot;I&quot;, &quot;LOVE&quot;, &quot;YOU&quot;, &quot;FOREVER&quot;, &quot;嗳の諎觉&quot;, &quot;、头号可爱らb(~▽~)d&quot;, &quot;い☆シ花心少爷&quot;, &quot;oI罓罓Io&quot;, &quot;—━☆沉默づ&quot;</span><br><span class="line">, &quot;萿恠誋忆里&quot;, &quot;ミ┌謝|▍幕]&quot;, &quot;※潶洲非亽&quot;, &quot;︻┻┳═一暗流&quot;, &quot;▄︻┻═┳一狙&quot;, &quot;▄︻┻┳═丶神&quot;, &quot;︻┳═一ㄖ_&quot;, &quot;▄︻┻色ζ疯&quot;, &quot;︻K▅▆▇◤&quot;</span><br><span class="line">, &quot;▄︻┻┳═一灰&quot;, &quot;▄︻┳═一魔狼&quot;, &quot;︻┶┳═一&quot;);</span><br><span class="line"></span><br><span class="line">  var a_index &#x3D; Math.floor((Math.random() * a.length));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Entertainment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>call</title>
      <link href="/2020/09/19/JavaScript/callApply/"/>
      <url>/2020/09/19/JavaScript/callApply/</url>
      
        <content type="html"><![CDATA[<h1 id="Call-and-apply"><a href="#Call-and-apply" class="headerlink" title="Call and apply"></a>Call and apply</h1><ol><li>call(要改变 this 指针的对象,传递的参数不能为数组)</li><li>apply (要改变 this 指针的对象,[“hs”,”hw”])</li><li>立刻执行函数</li></ol><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,3,4,1];</span><br><span class="line">console.log(Math.max.call(Math, [...arr]));</span><br><span class="line">console.log(Math.max.apply(Math,arr))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Call </tag>
            
            <tag> Apply </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set</title>
      <link href="/2020/09/18/JavaScript/Set/"/>
      <url>/2020/09/18/JavaScript/Set/</url>
      
        <content type="html"><![CDATA[<h1 id="Set-WeakSet-小结"><a href="#Set-WeakSet-小结" class="headerlink" title="Set WeakSet 小结"></a>Set WeakSet 小结</h1><blockquote><p>Set 对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>let set = new Set();</p></blockquote><ol><li>set.add(key)<ul><li>尾部添加元素</li></ul></li><li>set.cleat()<ul><li>清空元素</li></ul></li><li>set.delete(key)<ul><li>删除元素 return true / false</li></ul></li><li>set.has(key)<ul><li>元素是否存在</li></ul></li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li><p>Set - &gt; Array</p><ul><li>Array.from(set)</li><li>[…ser]</li></ul></li><li><p>Set &lt;- Array</p><ul><li>let arr = [“1”,”2”,”1”]; let set = new Set(arr);</li></ul></li></ol><h3 id="相互转换小例子"><a href="#相互转换小例子" class="headerlink" title="相互转换小例子"></a>相互转换小例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let hs &#x3D; new Set(&quot;123456789&quot;);</span><br><span class="line">hs &#x3D; new Set([...hs].filter(item &#x3D;&gt; item &gt; 5;))</span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let set &#x3D; new Set(&quot;123&quot;).forEach((value,key,arr) &#x3D;&gt; value)</span><br><span class="line">let set &#x3D; new Set(&quot;123&quot;).for( const value of set) console.log(value)</span><br></pre></td></tr></table></figure><h3 id="交集-并集-差集"><a href="#交集-并集-差集" class="headerlink" title="交集 并集 差集"></a>交集 并集 差集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">let a &#x3D; new Set([1, 2, 3, 4, 5]);</span><br><span class="line">let b &#x3D; new Set([1, 3, 6, 7, 5, 9]);</span><br><span class="line">&#x2F;&#x2F;并集</span><br><span class="line">console.log(new Set([...a, ...b]));</span><br><span class="line">&#x2F;&#x2F;差集</span><br><span class="line">console.log(new Set([...a].filter( item &#x3D;&gt; !b.has(item))));</span><br><span class="line">&#x2F;&#x2F;交集</span><br><span class="line">console.log(new Set([...a].filter(item &#x3D;&gt; b.has(item))));</span><br></pre></td></tr></table></figure><h3 id="热词小实例"><a href="#热词小实例" class="headerlink" title="热词小实例"></a>热词小实例</h3><p><strong>效果</strong><br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/set.png" alt="添加后在下方生成相应的 li 标签"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      padding: 200px;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;hs&quot; id&#x3D;&quot;&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;ul&gt;&lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">    let obj &#x3D; &#123;</span><br><span class="line">      data: new Set(),</span><br><span class="line">      set keyword(word) &#123;</span><br><span class="line">        this.data.add(word);</span><br><span class="line">      &#125;,</span><br><span class="line">      show() &#123;</span><br><span class="line">        let ul &#x3D; document.querySelector(&quot;ul&quot;);</span><br><span class="line">        ul.innerHTML &#x3D; &quot;&quot;;</span><br><span class="line">        this.data.forEach(function (value) &#123;</span><br><span class="line">          ul.innerHTML +&#x3D; &#96;&lt;li&gt;$&#123;value&#125;&lt;&#x2F;li&gt;&#96;;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    let input &#x3D; document.querySelector(&quot;[name&#x3D;&#39;hs&#39;]&quot;);</span><br><span class="line">    input.addEventListener(&quot;blur&quot;, function () &#123;</span><br><span class="line">      obj.keyword &#x3D; this.value;</span><br><span class="line">      obj.show();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h1><h3 id="遍历方法同上"><a href="#遍历方法同上" class="headerlink" title="遍历方法同上"></a>遍历方法同上</h3><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><blockquote><p>let set = new WeakSet()<br>引用类型</p></blockquote><ol><li><p>set.add(key)</p><ul><li>添加内容</li></ul></li><li><p>set.delete(key)</p><ul><li>删除内容</li></ul></li><li><p>set.has(key)</p><ul><li>判断是否存在</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Set函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map WeakMap小结</title>
      <link href="/2020/09/16/JavaScript/Map-0/"/>
      <url>/2020/09/16/JavaScript/Map-0/</url>
      
        <content type="html"><![CDATA[<h1 id="Map-WeakMap-小结"><a href="#Map-WeakMap-小结" class="headerlink" title="Map WeakMap 小结"></a>Map WeakMap 小结</h1><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><blockquote><p>let map = new Map();</p></blockquote><h3 id="Map-方法"><a href="#Map-方法" class="headerlink" title="Map 方法"></a>Map 方法</h3><ol><li>map.clear()<ul><li>清空所有键值对</li></ul></li><li>map.delete(key)<ul><li>删除某一元素 true / false</li></ul></li><li>map.entires()<ul><li>返回一个新的迭代对象包括所有的键值对</li></ul></li><li>mao.forEach(callbackFn)<ul><li>遍历 Map 集合中的值</li></ul></li><li>map.get(key)<ul><li>返回键对应的 值</li></ul></li><li>map.has(key)<ul><li>是否含 键 true / false</li></ul></li><li>map.keys()<ul><li>返回所有的 键</li></ul></li><li>map.set(key,value)<ul><li>设置对象中 键和值</li></ul></li><li>map.values()<ul><li>返回所有的 值</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let hs &#x3D; new Map([</span><br><span class="line">     [&quot;f1&quot;, &quot;张&quot;],</span><br><span class="line">     [&quot;f2&quot;, &quot;李&quot;],</span><br><span class="line">     [&quot;f3&quot;, &quot;王&quot;],</span><br><span class="line">   ]);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; console.log(hs.keys()); [&#39;f1&#39;,&#39;f2&#39;,&#39;f3&#39;]</span><br><span class="line">   &#x2F;&#x2F; console.log(hs.values());[&#39;张&#39;,&#39;李&#39;,&#39;王&#39;]</span><br><span class="line">   &#x2F;&#x2F; console.log(hs.has(&quot;张&quot;)); false</span><br><span class="line">   &#x2F;&#x2F; console.log(hs.get(&quot;张&quot;)); undefined</span><br><span class="line">   &#x2F;&#x2F; console.log(hs.clear());</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>Map -&gt; Array -&gt; Map</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let hs &#x3D; new Map([</span><br><span class="line">     [&quot;f1&quot;, &quot;张&quot;],</span><br><span class="line">     [&quot;f2&quot;, &quot;李&quot;],</span><br><span class="line">     [&quot;f3&quot;, &quot;王&quot;],</span><br><span class="line">   ]);</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;console.log([...hs.values()]);   (3) [&quot;张&quot;, &quot;李&quot;, &quot;王&quot;]</span><br><span class="line"> &#x2F;&#x2F;console.log([...hs.keys()]);     (3) [&quot;f1&quot;, &quot;f2&quot;, &quot;f3&quot;]</span><br><span class="line"> &#x2F;&#x2F;console.log([...hs.entires()]);  MapIterator &#123;&quot;f1&quot; &#x3D;&gt; &quot;张&quot;, &quot;f2&quot; &#x3D;&gt; &quot;李&quot;, &quot;f3&quot; &#x3D;&gt; &quot;王&quot;&#125;</span><br><span class="line"> &#x2F;&#x2F;console.log(new Map([...hs]));   Map(3) &#123;&quot;f1&quot; &#x3D;&gt; &quot;张&quot;, &quot;f2&quot; &#x3D;&gt; &quot;李&quot;, &quot;f3&quot; &#x3D;&gt; &quot;王&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><p><strong>效果图</strong><br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/Map.png" alt="效果图1">;<br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/map1.1.png" alt="效果图2"><br><strong>原理解释</strong></p><ul><li>主要是用到了数组中的 every 、结构特性 和 Map 的结合</li><li>结构特性主要是方便取值 every(([elem, config])</li><li>every 全为真才 打印 （两个都选上时）</li><li>其中一个没有选 就利用 || 的特性 输出 对应的 err 信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;&quot; onsubmit&#x3D;&quot;return post()&quot;&gt;</span><br><span class="line">            接受协议：</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;agreement&quot; error&#x3D;&quot;请接收协议&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">        我是学生：</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;student&quot; error&#x3D;&quot;网站只对学生开放&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    function post()&#123;</span><br><span class="line">         let map &#x3D;new Map()</span><br><span class="line">         let inputs &#x3D;document.querySelectorAll(&quot;[error]&quot;)</span><br><span class="line">         inputs.forEach(item&#x3D;&gt;&#123;</span><br><span class="line">            map.set(item,&#123;</span><br><span class="line">                error:item.getAttribute(&#39;error&#39;),</span><br><span class="line">                status:item.checked</span><br><span class="line">            &#125;)</span><br><span class="line">         &#125;)</span><br><span class="line">         return  [...map].every(([elem, config])&#x3D;&gt;&#123;</span><br><span class="line">            config.status || alert(config.error);</span><br><span class="line">            return config.status;</span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h1><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>引用类型</li><li>当外部数据改变时，内部数据自动清除<blockquote><p>new WeakMap([iterable])</p></blockquote></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><blockquote><p>let map = new WeakMap()</p></blockquote><ol><li><p>map.set(key)</p><ul><li>添加内容</li></ul></li><li><p>map.get()</p><ul><li>获取内容</li></ul></li><li><p>map.delete(key)</p><ul><li>删除内容</li></ul></li><li><p>map.has(key)</p><ul><li>判断是否存在</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map方法总结</title>
      <link href="/2020/09/16/JavaScript/map/"/>
      <url>/2020/09/16/JavaScript/map/</url>
      
        <content type="html"><![CDATA[<h1 id="map-方法总结"><a href="#map-方法总结" class="headerlink" title="map 方法总结"></a>map 方法总结</h1><p><strong>主要作用</strong></p><ul><li>对数组进行二次操作，并返回一个数组</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>var new_array = arr.map(function callback(currentValue[, index[, array]])<br>{ // Return element for new_array }[, thisArg])</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ol><li>callback 回调函数</li></ol><ul><li>生成新的数组</li></ul><ol start="2"><li>currentValue 当前处理元素</li></ol><ul><li>index 当前处理元素的索引值</li><li>调用 map 的元素组</li></ul><h3 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h3><ul><li>map 不会改变元素组 所以你需要一个新的数组来接受返回的数组</li><li>map 函数会对有索引值的元素进行遍历</li></ul><h3 id="简单运用"><a href="#简单运用" class="headerlink" title="简单运用"></a>简单运用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let num &#x3D; [0, 1, 2, 3, 4];</span><br><span class="line">    const res &#x3D; num.map((value) &#x3D;&gt; value * 2);</span><br><span class="line">    console.log(res);</span><br><span class="line">    &#x2F;&#x2F;结果 (5) [0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>filter 小结</title>
      <link href="/2020/09/13/JavaScript/filter/"/>
      <url>/2020/09/13/JavaScript/filter/</url>
      
        <content type="html"><![CDATA[<h1 id="filter-小结"><a href="#filter-小结" class="headerlink" title="filter 小结"></a>filter 小结</h1><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><blockquote><p>var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</p></blockquote><ol><li>参数</li></ol><ul><li>callback 回调函数 true 是返回元素 false 过滤掉次元素<ul><li>element 当前正在处理的函数</li><li>index 当前正在处理的函数的索引值</li><li>array 调用 filter 函数的数组</li></ul></li><li>thisArg<ul><li>执行 callback 时，用于 this 的值。</li><li>只有下面 this 的值是 undecided，其余 this 的值是 Window</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  &quot;use strict&quot;;</span><br><span class="line">let num &#x3D; [0, 1, 2, 3, 4];</span><br><span class="line">const res &#x3D; num.filter(function (value) &#123;</span><br><span class="line">  console.log(this);&#x2F;&#x2F;打印的值为undecided</span><br><span class="line">  return value &gt; 2;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>filter 不会改变原数组，它返回过滤后的新数组，需要一个新的数组来接受结果</p></li><li><p>实现原理剖析</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function myfilter(arr, callback) &#123;</span><br><span class="line">    let newArr &#x3D; [];</span><br><span class="line">    for (const value of arr) &#123;</span><br><span class="line">      if (callback(value) &#x3D;&#x3D;&#x3D; true) newArr.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    return newArr;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(</span><br><span class="line">    myfilter(num, function (item) &#123;</span><br><span class="line">      return item &gt; 2;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>原理解释</strong></p><ul><li>需要传入一个数组和一个回调函数作为参数</li><li>创建一个新的数组来接受结果</li><li>通过回调函数的判断结果 将符合的数据压入新的数组</li><li>最后返回新的数组</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let num &#x3D; [0, 1, 2, 3, 4];</span><br><span class="line">   const res &#x3D; num.filter((value) &#x3D;&gt; value &gt; 2);</span><br><span class="line">   console.log(res); &#x2F;&#x2F; &#123;3,4&#125;</span><br></pre></td></tr></table></figure><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote><p>filter 被添加到 ECMA-262 标准第 5 版中，因此在某些实现环境中不被支持。可以把下面的代码插入到脚本的开头来解决此问题，该代码允许在那些没有原生支持 filter 的实现环境中使用它。该算法是 ECMA-262 第 5 版中指定的算法，假定 fn.call 等价于 Function.prototype.call 的初始值，且 Array.prototype.push 拥有它的初始值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">if (!Array.prototype.filter)&#123;</span><br><span class="line">  Array.prototype.filter &#x3D; function(func, thisArg) &#123;</span><br><span class="line">    &#39;use strict&#39;;</span><br><span class="line">    if ( ! ((typeof func &#x3D;&#x3D;&#x3D; &#39;Function&#39; || typeof func &#x3D;&#x3D;&#x3D; &#39;function&#39;) &amp;&amp; this) )</span><br><span class="line">        throw new TypeError();</span><br><span class="line"></span><br><span class="line">    var len &#x3D; this.length &gt;&gt;&gt; 0,</span><br><span class="line">        res &#x3D; new Array(len), &#x2F;&#x2F; preallocate array</span><br><span class="line">        t &#x3D; this, c &#x3D; 0, i &#x3D; -1;</span><br><span class="line">    if (thisArg &#x3D;&#x3D;&#x3D; undefined)&#123;</span><br><span class="line">      while (++i !&#x3D;&#x3D; len)&#123;</span><br><span class="line">        &#x2F;&#x2F; checks to see if the key was set</span><br><span class="line">        if (i in this)&#123;</span><br><span class="line">          if (func(t[i], i, t))&#123;</span><br><span class="line">            res[c++] &#x3D; t[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      while (++i !&#x3D;&#x3D; len)&#123;</span><br><span class="line">        &#x2F;&#x2F; checks to see if the key was set</span><br><span class="line">        if (i in this)&#123;</span><br><span class="line">          if (func.call(thisArg, t[i], i, t))&#123;</span><br><span class="line">            res[c++] &#x3D; t[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.length &#x3D; c; &#x2F;&#x2F; shrink down array to proper size</span><br><span class="line">    return res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array相关知识总结</title>
      <link href="/2020/09/12/JavaScript/Array/"/>
      <url>/2020/09/12/JavaScript/Array/</url>
      
        <content type="html"><![CDATA[<h1 id="Array-相关知识总结"><a href="#Array-相关知识总结" class="headerlink" title="Array 相关知识总结"></a>Array 相关知识总结</h1><h3 id="创建-Array-的方法"><a href="#创建-Array-的方法" class="headerlink" title="创建 Array 的方法"></a>创建 Array 的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let  array &#x3D;[1,2,3 ]</span><br><span class="line">let array &#x3D; Array(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;)</span><br></pre></td></tr></table></figure><h3 id="Array-的相关方法"><a href="#Array-的相关方法" class="headerlink" title="Array 的相关方法"></a>Array 的相关方法</h3><ul><li>array.length 获取数组的长度</li><li>isArray 判断是否是数组</li><li>let array = Array.of(6) 结果 [6]</li><li>let arr = Array(6); 结果 (6)[空*6]</li><li>let arr.toString 将数组元素转化为 字符串形式</li><li>arr.join(“ - “) 连接</li><li>Array.from(arr,function(){}) 可以对数组进一步操作 转化为数组</li></ul><h3 id="Arrar-的常用方法"><a href="#Arrar-的常用方法" class="headerlink" title="Arrar 的常用方法"></a>Arrar 的常用方法</h3><ol><li>点语法 […arr]<ul><li>[…divs] 将 DOM 元素转化为 Array 操作</li></ul></li><li>结构语法 将左边的值分配给右边<ul><li>let [name,year] = [ “lis”,2000] let [,nem ]= [,”lis”]</li></ul></li><li>arr.concat 连接函数 （推荐点语法）</li><li>arr.copyWithin(复制的元素要放的起始位置，开始复制的位置，结束位置)</li><li>arr.ever((value,index,arr)=&gt;consols.log(value,index,arr)) 全部为真才打印 应用场景：作统一判断</li><li>arr.some((value,index,arr)=&gt;consols.log(value,index,arr)) 任何一个为真就打印 应用场景：作统一判断</li><li>arr.filter((value,index,arr)=&gt;return (value==”css”))</li></ol><h3 id="Array-添加元素"><a href="#Array-添加元素" class="headerlink" title="Array 添加元素"></a>Array 添加元素</h3><ol><li>利用展开语法追加 […a,b…]</li><li>arr.push() 在末尾追加元素</li><li>pop() 从末尾弹出一个元素</li><li>unshift 从前面追加一个元素</li><li>shift 从前面弹出一个元素</li><li>fill()填充元素 fill（e,start,end）</li><li>slice 截断函数 （start，etnd）原数组不变</li><li>splice (start,num,e) 原数组改变 可以完成 增 删 改</li></ol><h3 id="清空-Array"><a href="#清空-Array" class="headerlink" title="清空 Array"></a>清空 Array</h3><ol><li>arr = [] 开辟新的存储空间</li><li>arr.length = 0 改变原来内存中的数据</li><li>arr.splice(0)</li></ol><h3 id="Array-查找"><a href="#Array-查找" class="headerlink" title="Array 查找"></a>Array 查找</h3><ul><li>indexOf true 元素所在的索引值 false 返回 -1<ul><li>if(arr.indexOf(2)! ===-1){}</li></ul></li><li>lastindexOf 逆序查找</li><li>includes 返回的是 布尔值 不适合查找引用类型</li><li>find true 返回找到的值 false undefined<ul><li>适合查找引用类型</li></ul></li><li>findIndex 返回元素的索引值</li></ul><h3 id="Array-元素排序"><a href="#Array-元素排序" class="headerlink" title="Array 元素排序"></a>Array 元素排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1,2,5]</span><br><span class="line">arr.sort(function(a,b)&#123;</span><br><span class="line"></span><br><span class="line">return b-a;&#x2F;&#x2F;从大到小</span><br><span class="line">&#x2F;&#x2F; return a-b; &#x2F;&#x2F;从小到大</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Array-遍历"><a href="#Array-遍历" class="headerlink" title="Array 遍历"></a>Array 遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (let i &#x3D; 0;i &lt; arr.length;i++ )return arr[i].title&#x3D;&quot;hs&quot;;</span><br><span class="line">for(const key in arr ) return [key].title &#x3D; &quot;hs&quot;</span><br><span class="line">for(const value of arr)return value ++</span><br><span class="line">arr.forEach((item.index,arr)&#x3D;&gt; item)</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li><p>for … of,forEach 中 value 改变的值 （arr 对象类型可以改变）<br>（arr 数字 不能改变）</p></li><li><p>*<em>数字雨效果展示**</em></p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/llvyr/img/raw/master/img/20200916093952.png"></li><li><p>源码解析  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;canvas id&#x3D;&quot;canvas&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var canvas &#x3D; document.getElementById(&quot;canvas&quot;); &#x2F;&#x2F;获取容器</span><br><span class="line">      var ctx &#x3D; canvas.getContext(&quot;2d&quot;); &#x2F;&#x2F;设置画笔</span><br><span class="line">      canvas.width &#x3D; window.innerWidth; &#x2F;&#x2F;设置容器宽度</span><br><span class="line">      canvas.height &#x3D; window.innerHeight; &#x2F;&#x2F;设置容器高度</span><br><span class="line">      var texts &#x3D; &quot;0123456789&quot;.slice(&quot;&quot;); &#x2F;&#x2F;设置显示内容</span><br><span class="line">      var fontSize &#x3D; 16; &#x2F;&#x2F;设置字体大小</span><br><span class="line">      var columns &#x3D; canvas.width &#x2F; fontSize; &#x2F;&#x2F;计算出显示屏一共可以容纳多少列</span><br><span class="line">      var drops &#x3D; []; &#x2F;&#x2F;定义数组</span><br><span class="line">      for (var i &#x3D; 0; i &lt; columns; i++) &#123;</span><br><span class="line">        drops[i] &#x3D; 1;</span><br><span class="line">      &#125; &#x2F;&#x2F;每一列中放入数字 1</span><br><span class="line">      function draw() &#123;</span><br><span class="line">        ctx.fillStyle &#x3D; &quot;rgba(0,0,0,0.05)&quot;; &#x2F;&#x2F;填充色彩的透明度</span><br><span class="line">        ctx.fillRect(0, 0, canvas.width, canvas.height); &#x2F;&#x2F;距离屏幕的位置  要填充的尺寸</span><br><span class="line">        ctx.fillStyle &#x3D; &quot;#0F0&quot;; &#x2F;&#x2F;填充的颜色</span><br><span class="line">        ctx.font &#x3D; fontSize + &quot;px arial&quot;; &#x2F;&#x2F;字体大小 字体样式</span><br><span class="line">        for (var i &#x3D; 0; i &lt; drops.length; i++) &#123;</span><br><span class="line">          var text &#x3D; texts[Math.floor(Math.random() * texts.length)]; &#x2F;&#x2F;从内容中随机取出一个数字</span><br><span class="line">          ctx.fillText(text, i * fontSize, drops[i] * fontSize); &#x2F;&#x2F;在画布上输出的文本  开始绘制文本的 x &#x2F; Y 坐标位置</span><br><span class="line"></span><br><span class="line">          if (drops[i] * fontSize &gt; canvas.height || Math.random() &gt; 0.98) &#123;</span><br><span class="line">            drops[i] &#x3D; 0;</span><br><span class="line">          &#125; &#x2F;&#x2F;改变起始点的位置</span><br><span class="line">          drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      setInterval(draw, 33); &#x2F;&#x2F;定时器</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce 的初步认识</title>
      <link href="/2020/09/10/JavaScript/reduce/"/>
      <url>/2020/09/10/JavaScript/reduce/</url>
      
        <content type="html"><![CDATA[<h1 id="reduce-的初步认识"><a href="#reduce-的初步认识" class="headerlink" title=" reduce 的初步认识 "></a><center> reduce 的初步认识 </center></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#%E8%AF%AD%E6%B3%95">参考文档：https://developer.mozilla.org </a></p><h2 id="reduce-接受的四个参数"><a href="#reduce-接受的四个参数" class="headerlink" title="reduce 接受的四个参数"></a>reduce 接受的四个参数</h2><ul><li>Accumulate (acc 累加器)</li><li>Current Value (cur) (当前值)</li><li>Current Index (idx) (当前索引)</li><li>Source Array (src) (源数组)</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h3><blockquote><p>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><strong>参数</strong></h3><ol><li>callback<ul><li>执行数组中的每一个值（未提供 initvalue 时）从数组下标为 1 的开始执行（数组第一个值作为 accumulator）</li><li>accumulator （第一个参数）<ul><li>上一次函数执行完后的返回值</li></ul></li><li>currentValue （第二个参数）<ul><li>当前正在处理的元素的值</li></ul></li><li>index （第三个参数）<ul><li>当前正在处理的元素的索引值</li></ul></li><li>array （第四个参数）<ul><li>原数组（调用 reduce 的数组）</li></ul></li></ul></li><li>initialValue</li></ol><ul><li>作为第一次调用 callback 函数时的第一个参数的值。<br>如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</li></ul><h3 id="reduce-运行解析表"><a href="#reduce-运行解析表" class="headerlink" title="reduce 运行解析表"></a>reduce 运行解析表</h3><blockquote><p>常用的写法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 2, 3, 4].reduce((prev, curr) &#x3D;&gt; prev +curr;</span><br></pre></td></tr></table></figure><ol><li>没有 initialValue</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array)&#123;</span><br><span class="line"> return accumulator + currentValue;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>callback</th><th>accumulater</th><th>currentValue</th><th>currentIndex</th><th>array</th><th>return value</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>1</td><td>[0, 1, 2, 3, 4]</td><td>1</td></tr><tr><td>2</td><td>1</td><td>2</td><td>2</td><td>[0, 1, 2, 3, 4]</td><td>3</td></tr><tr><td>3</td><td>3</td><td>3</td><td>3</td><td>[0, 1, 2, 3, 4]</td><td>6</td></tr><tr><td>5</td><td>6</td><td>4</td><td>4</td><td>[0, 1, 2, 3, 4]</td><td>10</td></tr></tbody></table><ol start="2"><li>let initialValue=10</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) &#x3D;&gt; &#123;</span><br><span class="line">    return accumulator + currentValue</span><br><span class="line">&#125;, 10)</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>callback</th><th>accumulater</th><th>currentValue</th><th>currentIndex</th><th>array</th><th>return value</th></tr></thead><tbody><tr><td>1</td><td>10</td><td>0</td><td>0</td><td>[0, 1, 2, 3, 4]</td><td>10</td></tr><tr><td>2</td><td>10</td><td>1</td><td>1</td><td>[0, 1, 2, 3, 4]</td><td>11</td></tr><tr><td>3</td><td>11</td><td>2</td><td>2</td><td>[0, 1, 2, 3, 4]</td><td>13</td></tr><tr><td>4</td><td>13</td><td>3</td><td>3</td><td>[0, 1, 2, 3, 4]</td><td>16</td></tr><tr><td>5</td><td>16</td><td>4</td><td>4</td><td>[0, 1, 2, 3, 4]</td><td>20</td></tr></tbody></table><h3 id="reduce-的一些常用的小案例"><a href="#reduce-的一些常用的小案例" class="headerlink" title="reduce 的一些常用的小案例"></a>reduce 的一些常用的小案例</h3><ol><li>求和</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let  arr &#x3D; [0, 1, 2, 3, 4];</span><br><span class="line">let initialValue &#x3D; 0;</span><br><span class="line">let sum &#x3D; [...arr].reduce((acc,cur)&#x3D;&gt; acc+cur,initialValue)</span><br><span class="line">    &#x2F;&#x2F;console.log(sum); 10</span><br></pre></td></tr></table></figure><ol start="2"><li>求最大值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [0, 1, 2, 30, 4];</span><br><span class="line">let initialValue &#x3D; 0;</span><br><span class="line">    let max &#x3D; [...arr].reduce((acc, cur) &#x3D;&gt; (acc &gt; cur ? acc : cur), initialValue);</span><br><span class="line">     &#x2F;&#x2F;console.log(max); 30</span><br></pre></td></tr></table></figure><ol start="3"><li>累加对象中的值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [&#123;x:0&#125;, &#123;x:1&#125;, &#123;x:2&#125;, &#123;x:3&#125;, &#123;x:4&#125;];</span><br><span class="line">let initialValue &#x3D; 0;</span><br><span class="line">let sum &#x3D; [...arr].reduce((acc,cur)&#x3D;&gt; acc+cur.x,initialValue)</span><br><span class="line"> &#x2F;&#x2F;console.log(sum); 10</span><br></pre></td></tr></table></figure><h4 id="自己写的一个小案例（好像和-reduce-关系不大）"><a href="#自己写的一个小案例（好像和-reduce-关系不大）" class="headerlink" title="自己写的一个小案例（好像和 reduce 关系不大）"></a>自己写的一个小案例（好像和 reduce 关系不大）</h4><p><strong>效果图</strong></p><iframe height="800" width="100%" src="https://www.bilibili.com/video/BV17a4y1j7ax?t=4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><strong>实现步骤</strong></p><ul><li>获取容器标签</li><li>调用 reduce 方法 将容器中的文字设为空，并为每一个字母创建一个 span 标签</li><li>将 span 放入容器中</li><li>为每一个 span 标签添加监听事件 mousemove 和一个 color 类（控制动画的类）</li><li>利用 animationend 的一个 API 函数（起到动画结束立即执行的作用）去除 color 类</li></ul><p><strong>源代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body &#123;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        height: 100vh;</span><br><span class="line">        background: #fffa65;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">        font-size: 4em;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        text-transform: uppercase;</span><br><span class="line">        color: cornflowerblue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div&gt;span &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        margin-right: 15px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .color &#123;</span><br><span class="line">        animation: move 1s linear 2 alternate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @keyframes move &#123;</span><br><span class="line">        25% &#123;</span><br><span class="line">            color: darkgoldenrod;</span><br><span class="line">            transform: scale(1.5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line"></span><br><span class="line">            transform: scale(2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        75% &#123;</span><br><span class="line"></span><br><span class="line">            transform: scale(1.5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line">            color: darkorange;</span><br><span class="line">            transform: scale(1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;Helloworld&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function skipText() &#123;</span><br><span class="line">        const div &#x3D; document.querySelector(&#39;div&#39;);</span><br><span class="line">        [...div.textContent].reduce(function (pre, cur, index) &#123;</span><br><span class="line">            pre &#x3D;&#x3D; index &amp;&amp; (div.innerHTML &#x3D; &#39;&#39;);</span><br><span class="line">            let span &#x3D; document.createElement(&#39;span&#39;);</span><br><span class="line">            span.innerHTML &#x3D; cur;</span><br><span class="line">            div.appendChild(span);</span><br><span class="line">            span.addEventListener(&quot;mousemove&quot;, function () &#123;</span><br><span class="line">                this.classList.add(&quot;color&quot;);</span><br><span class="line">            &#125;)</span><br><span class="line">            span.addEventListener(&quot;animationend&quot;, function () &#123;</span><br><span class="line">                this.classList.remove(&quot;color&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, 0)</span><br><span class="line">    &#125;</span><br><span class="line">    skipText();</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vusal Studio Colde系统禁止运行脚本</title>
      <link href="/2020/09/06/bug/Vsual%20Studio%20Code%E7%B3%BB%E7%BB%9F%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/09/06/bug/Vsual%20Studio%20Code%E7%B3%BB%E7%BB%9F%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Visual-Studio-Code-的终端命令是遇到系统禁止运行脚本的问题"><a href="#使用Visual-Studio-Code-的终端命令是遇到系统禁止运行脚本的问题" class="headerlink" title="使用Visual Studio Code 的终端命令是遇到系统禁止运行脚本的问题"></a>使用Visual Studio Code 的终端命令是遇到系统禁止运行脚本的问题</h2><p> <strong>利用终端执行命令时遇到无法加载文件，系统禁止运行脚本的错误提示。如下图</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906085436744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ol><li>打开WindowsPowerShell 选择以<strong>管理员身份运行</strong>，如下图<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906085737433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>接着进入到下图页面输入<strong>A</strong>即可<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906085948337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>回到编辑器，再次运行命令查看结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200906090045579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>问题解决</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vusal Studio Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五四运动</title>
      <link href="/2020/09/02/%E6%96%87%E7%AB%A0/%E4%BA%94%E5%9B%9B%E8%BF%90%E5%8A%A8/"/>
      <url>/2020/09/02/%E6%96%87%E7%AB%A0/%E4%BA%94%E5%9B%9B%E8%BF%90%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<center><h1>五四”永垂不朽</h1></center><p><strong>摘 要</strong>：1919 年 5 月 4 日爆发的五四运动标志中国近代史新民主主义革命的开端，是一场民族处于危亡之间为了捍卫民族尊严而掀起的伟大社会革命运动，五四运动的精神随着时代的发展和社会的进步变得逐渐丰富，人们对五四精神理解的更为深刻，作为新时代的青年应该将“五四”的“火焰”传承下去。<br>关键词：五四精神；五四运动；新时代中国青年的担当</p><h2 id="一、“五四”之新征程——新民主主义"><a href="#一、“五四”之新征程——新民主主义" class="headerlink" title="一、“五四”之新征程——新民主主义"></a>一、“五四”之新征程——新民主主义</h2><p>&emsp;&emsp;1919 年 5 月 4 日爆发的这场运动对中国造成了深远的影响，它标志中国近代史新民主主义革命的开端。五四运动爆发于民族危难之际，是一场以先进青年知识分子为先锋、广大人民群众参加的彻底反帝反封建的爱国革命运动，是一场 民族处于危亡之间为了捍卫民族尊严而掀起的伟大社会革命运动。<br>&emsp;&emsp;五四运功在十月革命之后爆发是世界无产阶级革命的一部分。五四运动的性质是资产阶级民主义革命，由无产阶级领导以建立新民主主义社会和各革命阶级联合专政的国家为目的[1]，五四运动促进了马克思主义在中国的进一步传播，为中国共产党的创立准备了条件。</p><h2 id="二、“五四”之精神——爱国主义"><a href="#二、“五四”之精神——爱国主义" class="headerlink" title="二、“五四”之精神——爱国主义"></a>二、“五四”之精神——爱国主义</h2><p>&emsp;&emsp;五四运动被人们牢记和尊崇在于其崇高精神内涵，由于对五四运动有广义和狭义的理解，因此人们对五四精神有不同的解读，更重要的是时代的发展和社会的进步又给五四精神注入新的时代内涵。五四先驱李大钊所说: “我盼望中国学生界，把这种精神光大起来，以人类自由的精神扑灭一切强权，使正义、人道，一天比一天地昌明于全世界，不要把他看狭小了，把他仅仅看做一个狭义的爱国运动的纪念日。我更盼望从今以后，每年在这一天举行纪念的时候，都加上些新意义，这是五四精神历久弥新的奥妙所在，也是我们今天继续发扬五四精神的根本所在”[2]。每个人对于都五四精神有自己看法但爱国主义为五四精神的核心是毋庸置疑的。李大钊主张，“五四”精神是“爱国”、“直接行动”、“人类自由”[3]可见他把爱国作为五四精神中最重要的精神之一。陈独秀则认为，“五四运动重要的精神”就是“直接行动、牺牲精神。”[4]<br>&emsp;&emsp;随着时代的发展“五四精神”不断被赋予新的内涵，毛泽东将五四精神归结为民主与科学精神。习仲勋在五四运动六十五周年大会上的讲话中把五四精神概括为创造精神。江泽民在庆祝北京大学建校一百周年大会上的讲话中指出: “五四运动的精神，最根本的就是中华民族的爱国主义精神。”[5]胡锦涛在纪念五四运动 80 周年大会上的讲话中也指出: “五四精神的核心，是伟大的爱国主义。”[6]习近平总书记在纪念五四运动 100 周年大会上的讲话中进一步强调:“五四运动，孕育了以爱国、进步、民主、科学为主要内容的伟大五四精神，其核心是爱国主精神。”[7]五四精神变得更富有内涵和哲理。</p><h2 id="三、“五四”之火永不熄——传承"><a href="#三、“五四”之火永不熄——传承" class="headerlink" title="三、“五四”之火永不熄——传承"></a>三、“五四”之火永不熄——传承</h2><p>&emsp;&emsp;青年是标志时代的最灵敏的晴雨表，青年是一个民族和国家的希望。习近平总书记曾说：“青年是希望的象征，青年一代有理想、有担当，国家就有前途，民族就有希望，实现我们的发展目标就有源源不断的强大力量”[8]处于新时代的我们注定要肩负起复兴中华民族的伟大使命，这就要求我们一定要传承好“五四精神”。</p><h4 id="（一）立鸿鹄之远志，做求实之人"><a href="#（一）立鸿鹄之远志，做求实之人" class="headerlink" title="（一）立鸿鹄之远志，做求实之人"></a>（一）立鸿鹄之远志，做求实之人</h4><p>&emsp;&emsp;坚定理想信念是我们的精神追求亦是我们的精神动力。新时代，我们要树立远大理想。“道不可坐论，德不能空谈。”[9]我们在树立理想信念的同时更要付诸实践。<br>在学习中我认真学习，用心生活每一天，认真对待每一次考试，始终不忘自己的理想和追求。在现实生活中我不随波逐流有自己的观点和立场，有自己的奋斗目标和志向，有明确的实施计划，能按时完成自己定下的目标。虽不能做到“不以物喜不以己悲”和“为中华之崛起而读书”的高度但坚守本心，踏实做人，实事求是的完成每一件事，还是能一直坚持到现在。远大的志向每个人都有，但近在眼前的任务并不是每个人都能交一份令自己满意的答卷，脚踏实地的做好眼前的任务才有可能完成自己的“鸿鹄之志”。</p><h4 id="（二）树创新之精神，做创造之人"><a href="#（二）树创新之精神，做创造之人" class="headerlink" title="（二）树创新之精神，做创造之人"></a>（二）树创新之精神，做创造之人</h4><p>&emsp;&emsp;创新是一个国家和民族进步的灵魂。我们作为社会上最富活力、最具创造性的群体，理应走在创新创造前列,展现我们应有的朝气，为祖国建设献上一份力。时代如洪荒猛兽，唯有创新才能永立浪头。就如同五四精神也一直被赋予新的内涵，这就是五四精神一直延续不被淘汰的原因。<br>创新对于我们来说就像“金点子”有时灵光一闪就有了新的想法，但这“灵光一现”是需要长时间积累的结晶，所以在校园生活中我利用课外时间积极参加学校举办的科技活动，例如软件设计大赛、科技文化节，辩论赛以及相关讲座，在兴趣中学习，在学习中创新，利用空闲时间来填充自己，让自己变得充实，让创造变得可能。</p><h4 id="（三）担民族之重任，做圆梦之人"><a href="#（三）担民族之重任，做圆梦之人" class="headerlink" title="（三）担民族之重任，做圆梦之人"></a>（三）担民族之重任，做圆梦之人</h4><p>&emsp;&emsp;作为当代大学生的我们注定是要扛起祖国建设，民族复兴的重任，中华五千年的梦想正在逐步实现，梦想需要接力，民族需要继承，我们就是接班人。我们需要坚持中国共产党的领导，在党的领导下一步步走向辉煌！习近平说过，“中国梦是我们的，更是你们青年一代的。中华民族伟大复兴将在广大青年的接力奋斗中变为现实。”[10]<br>&emsp;&emsp;我明白处于青年的我们无法现在就挑起“大梁”，我们需要厚积薄发，所以我坚持做到“五四精神”中的爱国主义，认真学习每一次的团课，积极参见学校团组织举办的爱国活动和讲座，积极参见入党竞选，争取早一天投入到复兴中华的伟大使命，为祖国奉献自己的一份力。<br>最后我深刻意识到五四运动的伟大，也深刻认识到“五四精神”必将永垂不朽！</p><p><strong>参考文献</strong><br>[1]石国亮.五四精神与新时代中国青年的责任担当[J].中国青年社会科学，2019，38(3)：2-3.<br>[2]丁晓洋.“五四”运动对青年使命的影响.吉林长春：吉林大学马克思主义学院，2019.<br>[3]中国社会科学院近代史研究所.五四运动回忆录,北京:中国社会科学出版社 1979.<br>[4]陈独秀.陈独秀最近之演说，[J]时报.中国社会科学出版社 1979 ，216 － 217.<br>[5]江泽民文选.北京:人民出版社 2006，123.<br>[6]胡锦涛.发扬伟大的爱国主义精神为建设有中国特色社会主义努力奋斗———在五四运动八十周年纪念大会上讲话,[J]人民日报，1999.<br>[7] [8] [10]习近平.在纪念五四运动 100 周年大会上的讲话[J]人民日报，2019.<br>[9]十八大以来重要文献选编［M］.北京：中央文献出版社，2018.</p>]]></content>
      
      
      <categories>
          
          <category> 政治论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> the May 4th Movement </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理想与担当</title>
      <link href="/2020/09/02/%E6%96%87%E7%AB%A0/%E7%90%86%E6%83%B3%E4%B8%8E%E6%8B%85%E5%BD%93/"/>
      <url>/2020/09/02/%E6%96%87%E7%AB%A0/%E7%90%86%E6%83%B3%E4%B8%8E%E6%8B%85%E5%BD%93/</url>
      
        <content type="html"><![CDATA[ <center><h1>理想与担当</h1></center>&emsp;&emsp;理想是人们对于未来的一种设想，担当就是将理想变为现实的桥梁，新时代青年更是如此，从新型冠状肺炎中我看到了属于青年人的骄傲，看到了我们青年人的榜样，从习总书记的信我知道我们肩负的历史使命和责任，对理想与担当有了更深刻的感悟。<p>&emsp;&emsp;生命的可贵是无与伦比的但在灾难面前却是显得那么渺小和脆弱，新型冠状肺炎这场突如其来的灾难带走了太多人的生命，带走了原本属于新年的欢声笑语，带走了一家人不多的团聚时光，带来的却是廖无人寂的街道，空旷的城市，和处于病毒笼罩下被威胁的我们。为响应国家发布的紧急公共卫生处理方案，我们只能呆在家中透过窗户看去外面的世界，通过电话来互报平安，世界变得安静，安静的令人害怕。</p><p>&emsp;&emsp;就是在这种危难之际，出现了这样一批人他们驱赶着“阴霾”带来“希望”，为我们添加了一份信心和温暖。他们有的穿上了防护服，戴上了防护镜，有的带上了医疗物资，有的带上了自己的积蓄,都奔向了最危险也是最需要救援的武汉市，27岁的湖南宁乡小伙郑能量说：“如果我不幸倒在了疫区，请把我的骨灰无菌处理后撒在长江，陪伴我的祖国。”上海的一位护士推迟了婚礼去防疫一线，出发前爱人悄悄塞给她一张纸条，上面写着“我会给你办一个完美的婚礼，爱你哟”，落款是充满自信的“你的帅气老公”。四川第四人民医院90后护士佘沙的一句话“我应该去，因为我是汶川人！”格外动人。这是他们的理想和担当，也用实际行动证明了习总书记的话：“新时代的中国青年是好样的，是堪当大任的！”</p><p>&emsp;&emsp;无数的青年志愿者带着为祖国承担一份力和一定会战胜病毒的决心汇集到武汉。他们是我们青年人的榜样，也是我们青年人应有的姿态，在祖国需要我们的时候，不畏艰险、冲锋在前、舍生忘死，彰显了青春的蓬勃力量。我们有自己的理想，我们也害怕死亡，但在祖国有难，我们理想就是希望祖国平安，我们可以不惧死亡，这是我们的担当。习总书记说：“青年一代有理想、有本领、有担当，国家就有前途，民族就有希望。”我们不会辜负国家对我们的希望，我们会用双手托起中华民族伟大的复兴梦。</p><p>&emsp;&emsp;正处青年我们最具有活力和创造力，中华民族的复兴落到的终究是青年人的身上。一百年前的“五四青年”能创造出属于他们的“神话”，一百年后的我们也能创造出属于这个时代的奇迹，新型冠状肺炎只不过是对我们的一次考验，也是我们的“成人礼”，我们不再是 “任性”“自我”“娇气”“不靠谱”代名词，我们也有刚毅果敢、充满活力的一面，我们敢于冲在最前线，非典的时候，是医护人员保护了幼小的我们，今天，轮到我们后去守护大家了。</p><p>&emsp;&emsp;什么是青年人的理想与担当，找一份好工作照顾好自己的家人，亦或是创造出一个品牌走向国际化，都不是，青年人的理想是在为祖国做出贡献的同时满足自身要求，完成自己的对家对国的使命，青年人的担当是国有难定支援，担负起社会及家庭交付给自己的任务。不给国家、社会制造麻烦，尽自己的最大力量为国家、社会创造利益，这才是青年人应有的理想和担当。牢记爱国之心，牢记历史使命，树立起正确的人生观、价值观、世界观，坚定的拥护中国共产党的领导，坚持理想与担当相统一。</p>]]></content>
      
      
      <categories>
          
          <category> 政治论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
            <tag> Ideal and responsibility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetBeabs 无法打开外部链接</title>
      <link href="/2020/09/01/bug/NetBeans%20%20%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E5%A4%96%E9%83%A8url%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/01/bug/NetBeans%20%20%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E5%A4%96%E9%83%A8url%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="NetBeans-无法打开外部url的问题"><a href="#NetBeans-无法打开外部url的问题" class="headerlink" title="NetBeans  无法打开外部url的问题"></a>NetBeans  无法打开外部url的问题</h2><h6 id="使用NetBeans的编辑器时，遇到了无法打开外部URL的情况"><a href="#使用NetBeans的编辑器时，遇到了无法打开外部URL的情况" class="headerlink" title="使用NetBeans的编辑器时，遇到了无法打开外部URL的情况"></a>使用NetBeans的编辑器时，遇到了无法打开外部URL的情况</h6><h3 id="解决方案-中文版-："><a href="#解决方案-中文版-：" class="headerlink" title="解决方案(中文版)："></a>解决方案(中文版)：</h3><h5 id="打开工具-gt-选项-gt-常规-gt-编辑-gt-添加-gt-浏览"><a href="#打开工具-gt-选项-gt-常规-gt-编辑-gt-添加-gt-浏览" class="headerlink" title="打开工具 &gt; 选项 &gt; 常规 &gt; 编辑 &gt; 添加 &gt; 浏览"></a>打开工具 &gt; 选项 &gt; 常规 &gt; 编辑 &gt; 添加 &gt; 浏览</h5><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200901191313724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h5 id="选择你要打开的浏览器我用的是chrome-exe，点击打开，最后点击确定，就可以使用了。"><a href="#选择你要打开的浏览器我用的是chrome-exe，点击打开，最后点击确定，就可以使用了。" class="headerlink" title="选择你要打开的浏览器我用的是chrome.exe，点击打开，最后点击确定，就可以使用了。"></a>选择你要打开的浏览器我用的是chrome.exe，点击打开，最后点击确定，就可以使用了。</h5><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200901191600488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjQ2Mzk4NA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 编程BUG </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/30/bug/hello-world/"/>
      <url>/2020/08/30/bug/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
